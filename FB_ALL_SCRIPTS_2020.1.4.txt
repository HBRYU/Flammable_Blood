using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class BD_Parallax : MonoBehaviour
{
    public Transform[] backgrounds;
    public float[] parallaxScales;
    public bool enableColorVariation;
    public float colorVariationDelta;
    public float smoothing = 1.0f;

    private Transform cam;
    private Vector3 prev_camPos;

    void Start()
    {
        cam = GameObject.FindGameObjectWithTag("MainCamera").transform;
        prev_camPos = cam.position;

        parallaxScales = new float[backgrounds.Length];

        for (int i = 0; i < backgrounds.Length; i++)
        {
            parallaxScales[i] = backgrounds[i].position.z * -1;
            if (enableColorVariation)
            {
                Color col = backgrounds[i].gameObject.GetComponent<SpriteRenderer>().color;
                //Debug.Log(col.r * colorVariationDelta * backgrounds[i].position.z);
                col.r *= colorVariationDelta * backgrounds[i].position.z;
                col.g *= colorVariationDelta * backgrounds[i].position.z;
                col.b *= colorVariationDelta * backgrounds[i].position.z;
                backgrounds[i].gameObject.GetComponent<SpriteRenderer>().color = col;
            }
        }
    }

    void FixedUpdate()
    {
        for (int i = 0; i < backgrounds.Length; i++)
        {
            float parallax = (prev_camPos.x - cam.position.x) * parallaxScales[i];

            float targetPosX = backgrounds[i].position.x + parallax;

            Vector3 targetPos = new Vector3(targetPosX, backgrounds[i].position.y, backgrounds[i].position.z);

            backgrounds[i].position = Vector3.Lerp(backgrounds[i].position, targetPos, smoothing);
        }

        prev_camPos = cam.position;
    }
}

using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class BreakableProp : MonoBehaviour
{
    public float health;
    public GameObject[] pieces;
    public GameObject smallExplosion;

    void Update()
    {
        if (health <= 0)
        {
            foreach(GameObject g in pieces)
            {
                Instantiate(g, transform.position, Quaternion.identity);
            }
            Instantiate(smallExplosion, transform.position, transform.rotation);
            Destroy(gameObject);
        }
    }

    public void TakeDamage(float damage)
    {
        health -= damage;
    }
}

using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class Bullet : MonoBehaviour
{
    private GM _GM_;
    private Rigidbody2D rb;
    public GameObject wielder;
    public float accuracy;
    public float speed;
    public float damage;

    public float life;

    public List<string> ignoreCollisionTags;

    public List<string> particleName;
    public List<GameObject> particles;

    public GameObject bulletContact;

    public bool hitEnemy_Flag;

    // Start is called before the first frame update
    void Start()
    {
        _GM_ = GameObject.FindGameObjectWithTag("GM").GetComponent<GM>();
        rb = GetComponent<Rigidbody2D>();
        transform.Rotate(0, 0, Random.Range(-1.0f, 1.0f) * accuracy);
        //Debug.Log("SCALE: " + wielder.transform.localScale.x);
        transform.localScale = wielder.transform.localScale;
        rb.velocity = transform.right * speed;

        particleName = _GM_.chunkParticles_names;
        particles = _GM_.chunkParticles;
    }

    // Update is called once per frame
    void Update()
    {
        life -= Time.deltaTime;
        if(life <= 0) { Destroy(gameObject); }
    }

    private void OnTriggerEnter2D(Collider2D other)
    {
        BulletCollision(other);
    }

    private void OnCollisionEnter2D(Collision2D other)
    {
        BulletCollision(other.collider);
    }

    void BulletCollision(Collider2D other)
    {
        
        if(other.GetComponent<Particle_Stats>() != null)
            SpawnParticles();

        switch (other.tag)
        {
            case "Ground":
                Instantiate(bulletContact, transform.position, transform.rotation);
                Destroy(gameObject);
                break;

            default:

                if (!ignoreCollisionTags.Contains(other.tag))
                {
                    if ((other.CompareTag("Enemy/Hitbox")) || (other.tag.Contains("Enemy/")) && !hitEnemy_Flag)
                    {
                        Instantiate(bulletContact, transform.position, transform.rotation);
                        HitEnemy();
                    }

                    if((other.gameObject.layer == LayerMask.NameToLayer("Prop/Interactive")))
                    {
                        Instantiate(bulletContact, transform.position, transform.rotation);
                        if(other.GetComponent<BreakableProp>() != null)
                        {
                            other.GetComponent<BreakableProp>().TakeDamage(damage);
                        }
                    }

                    Destroy(gameObject);
                }
                break;
        }

        /////////////////////////// Functions   함수들

        void SpawnParticles()   ///////////// 벽, 땅 등 파편
        {
            if (particleName.Contains(other.GetComponent<Particle_Stats>().particle))
            {
                Instantiate(particles[particleName.IndexOf(other.GetComponent<Particle_Stats>().particle)], transform.position, Quaternion.identity);
            }
            else
            {
                Debug.Log("ERR: Unknown particle name [" + other.GetComponent<Particle_Stats>().particle + "]");
                Instantiate(particles[particleName.IndexOf("Default")], transform.position, Quaternion.identity);
            }

        }

        void HitEnemy()     ///////////// 적을 맞췄을 때: 
        {
            GameObject enemy;
            if (other.CompareTag("Enemy/Hitbox"))
                enemy = other.transform.parent.gameObject;
            else
                enemy = other.gameObject;
            enemy.GetComponent<EnemyStats>().TakeDamage(damage);
            
            hitEnemy_Flag = true;
        }
    }
}
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class BulletShell : MonoBehaviour
{
    private Rigidbody2D rb;
    public float lifeTime;
    public float randomAngleOffset;
    public float minSpeed;
    public float randomSpeed;

    public AudioClip[] SFXs;

    [HideInInspector]
    public GameObject wielder;
    // Start is called before the first frame update
    void Start()
    {
        rb = GetComponent<Rigidbody2D>();
        Vector3 angles = new Vector3(0, 0, transform.rotation.z + Random.Range(-randomAngleOffset, randomAngleOffset));
        transform.Rotate(angles);
        transform.localScale = new Vector3(wielder.transform.localScale.x, transform.localScale.y, transform.localScale.z);
        rb.velocity = -transform.right * transform.localScale.x * (minSpeed + Random.Range(-randomSpeed, randomSpeed));
    }

    // Update is called once per frame
    void Update()
    {
        lifeTime -= Time.deltaTime;
        if(lifeTime <= 0)
        {
            Destroy(gameObject);
        }
    }

    private void OnCollisionEnter2D(Collision2D collision)
    {
        GetComponent<AudioSource>().PlayOneShot(SFXs[Random.Range(0, SFXs.Length)]);
    }
}

using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class CameraMan : MonoBehaviour
{
    private GM _GM_;
    public float speed;
    public GameObject target;
    Vector3 movePos;

    // Start is called before the first frame update
    void Start()
    {
        _GM_ = GM.GetGM();
        _GM_.AddShootingActiveSwitch("CameraMan");
        movePos = this.transform.position;
    }

    // Update is called once per frame
    void FixedUpdate()
    {
        if (!Input.GetKey("f"))
        {
            movePos = Vector3.Lerp(transform.position, target.transform.position, speed * Time.deltaTime);
            //_GM_.shooting_active_switches[_GM_.shooting_active_keys.IndexOf("CameraMan")] = true;
        }
        else
        {
            movePos = Vector3.Lerp(transform.position, GameObject.FindGameObjectWithTag("Player").transform.position, speed * Time.deltaTime);
            //_GM_.shooting_active_switches[_GM_.shooting_active_keys.IndexOf("CameraMan")] = false;
        }
        
        movePos.z = transform.position.z;
        transform.position = movePos;
    }
}
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class CameraShakeManager : MonoBehaviour
{
    public Transform camPos;

    public float shake_intensity;
    public float shake_duration;
    private float shake_duration_timer;

    Vector2 initPos;

    void Start()
    {
        initPos = camPos.localPosition;
    }

    void FixedUpdate()
    {
        //Debug.Log("SHaKinG Rn");

        Vector2 movePos = camPos.localPosition;

        if(shake_duration_timer > 0)
        {  
            float shakeForce = shake_duration_timer / shake_duration;
            movePos.x = initPos.x + Random.Range(-shake_intensity * shakeForce, shake_intensity * shakeForce);
            movePos.y = initPos.y + Random.Range(-shake_intensity * shakeForce, shake_intensity * shakeForce);

            camPos.localPosition = movePos;

            shake_duration_timer -= 1;
        }
        else
        {
            shake_duration = 0;
            shake_duration_timer = 0;
            shake_intensity = 0;
            camPos.localPosition = initPos;
        }

        
        
    }

    public void CameraShake(float intensity, float duration, bool multiply)
    {
        if(multiply)
            shake_intensity += intensity;
        else
        {
            if(shake_intensity < intensity)
            {
                shake_intensity = intensity;
            }
        }
            

        if(duration > shake_duration_timer)
        {
            shake_duration = duration;
            shake_duration_timer = duration;
        }
    }
}
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using TMPro;

public class Clock : MonoBehaviour
{
    public TextMeshProUGUI clockText;
    public TextMeshProUGUI clockText_score;
    public TextMeshProUGUI killsText;
    public TextMeshProUGUI killsText_score;
    public GameObject killsPanel;
    public int initTime;
    public float remainingTime;
    public float timeElapsed;

    public string endDisplayText;

    public bool useClock;
    public bool started;

    public bool paused;

    void Start()
    {
        remainingTime = initTime;
        killsPanel.SetActive(false);
    }

    void Update()
    {
        
        killsText_score.text = GM.GetGM().killCount.ToString();
        if (started)
        {
            if (GM.GetGM().playerAlive)
                clockText_score.text = (timeElapsed).ToString();
            if (!paused)
            {
                if(useClock)
                    remainingTime -= Time.deltaTime;
                timeElapsed += Time.deltaTime;
            }
            if(useClock)
                clockText.text = Mathf.RoundToInt(remainingTime).ToString();
            else
                clockText.text = Mathf.RoundToInt(timeElapsed).ToString();
            clockText.color = new Color(1, 1, 1, 1);
            killsPanel.SetActive(true);
            killsText.text = GM.GetGM().killCount.ToString();
            if(remainingTime <= 0)
            {
                End();
            }
        }
    }

    public void Begin()
    {
        started = true;
    }

    public void End()
    {
        clockText.text = endDisplayText;
        GM.DisplayText("TIME UP", true);
        GM.GetGM().player.GetComponent<PlayerStats>().TakeDamage(999999999);
        started = false;
    }
}
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class ClockEnd_CollisionTrigger : MonoBehaviour
{
    private void OnTriggerEnter2D(Collider2D collision)
    {
        if (collision.gameObject.tag == "Player")
            GM.GetGM().clock.End();
    }
}
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class ClockStart_CollisionTrigger : MonoBehaviour
{
    private void OnTriggerEnter2D(Collider2D collision)
    {
        if (collision.gameObject.CompareTag("Player"))
        {
            GM.GetGM().clock.Begin();
            Destroy(gameObject);
        }
    }
}
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using TMPro;

public class Console : MonoBehaviour
{
    public TMP_InputField inputField;

    public void commandEntered()
    {
        if(inputField.text != string.Empty)
            EnterCommand(inputField.text);
    }


    public void EnterCommand(string com)
    {
        string[] coms = com.Split('/');
        /*
        for (int i = 0; i < coms.Length; i++)
        {
            coms[i] = coms[i].ToLower();
            Debug.Log(coms[i]);
        }
        */

        try
        {
            switch (coms[0])
            {
                case "player":
                    switch (coms[1])
                    {
                        case "health":
                            if (coms[2] == "max")
                                GM.GetGM().player.GetComponent<PlayerStats>().health = GM.GetGM().player.GetComponent<PlayerStats>().maxHealth;
                            else
                                GM.GetGM().player.GetComponent<PlayerStats>().health = GM.GetFloat(coms[2], GM.GetGM().player.GetComponent<PlayerStats>().health);
                            GM.DisplayText("Command entered.", true);
                            break;
                        case "maxhealth":
                            GM.GetGM().player.GetComponent<PlayerStats>().maxHealth = GM.GetFloat(coms[2], GM.GetGM().player.GetComponent<PlayerStats>().maxHealth);
                            GM.DisplayText("Command entered.", true);
                            break;
                        case "fuel":
                            GM.GetGM().player.GetComponent<PlayerMove>().fuel = GM.GetFloat(coms[2], GM.GetGM().player.GetComponent<PlayerMove>().fuel);
                            GM.DisplayText("Command entered.", true);
                            break;
                        case "maxfuel":
                            GM.GetGM().player.GetComponent<PlayerMove>().maxFuel = GM.GetFloat(coms[2], GM.GetGM().player.GetComponent<PlayerMove>().maxFuel);
                            GM.DisplayText("Command entered.", true);
                            break;
                        case "god":
                            if(coms[2] == "enable")
                                GM.GetPlayer().GetComponent<PlayerStats>().god = true;
                            if(coms[2] == "disable")
                                GM.GetPlayer().GetComponent<PlayerStats>().god = false;
                            else
                                GM.DisplayText("Invalid command", true);
                            break;
                        default:
                            GM.DisplayText("Unknown command", true);
                            break;
                    }
                    break;
                case "getitem":
                    switch (coms[1])
                    {
                        case "module":
                            foreach (Module _GM_M in GM.GetGM().modulesList)
                            {
                                if (_GM_M.ID == coms[2] && _GM_M.level == GM.GetFloat(coms[3], 1))
                                {
                                    PlayerModuleManager mm = GM.GetPlayer().GetComponent<PlayerModuleManager>();
                                    if (mm.InsertModule(_GM_M) == false)
                                    {
                                        GM.DisplayText("Unable to add module", true);
                                    }
                                }
                            }
                            break;
                        case "weapon":
                            foreach (Item _GM_I in GM.GetGM().itemsList)
                            {
                                if (_GM_I.name == coms[2])
                                {
                                    GameObject wp = Instantiate((_GM_I.obj), transform.position, Quaternion.identity);
                                    wp.GetComponent<WeaponStats>()._GM_ = GameObject.FindGameObjectWithTag("GM").GetComponent<GM>();
                                    wp.GetComponent<WeaponStats>().PickUp(GM.GetPlayer().GetComponent<PlayerPickUp>().weaponsFolder.transform);
                                    GM.DisplayText("Picked up: " + _GM_I.name, false);
                                    GM.DisplayText("Command entered.", true);
                                }
                            }
                            break;

                        case "deployable":
                            foreach (Item _GM_I in GM.GetGM().itemsList)
                            {
                                if (_GM_I.name == coms[2])
                                {
                                    Item a = _GM_I;
                                    a.count = Mathf.RoundToInt(GM.GetFloat(coms[3], GM.GetGM().player.GetComponent<PlayerMove>().maxFuel));
                                    DeployablesManager dm = GM.GetPlayer().GetComponent<DeployablesManager>();
                                    dm.dplybles_count[dm.deployables.IndexOf(a.obj)] += (int)a.count;
                                    GM.DisplayText("Picked up: " + a.name + " GRND x (" + a.count + ")", false);
                                    GM.DisplayText("Command entered.", true);
                                }
                            }
                            break;
                        case "ammo":
                            PlayerWeaponManager wm = GM.GetPlayer().GetComponent<PlayerWeaponManager>();
                            wm.ammo_count[wm.ammo_type.IndexOf(coms[2])] += Mathf.RoundToInt(GM.GetFloat(coms[3], 0));
                            GM.DisplayText("Picked up: " + coms[2] + " x (" + GM.GetFloat(coms[3], 0) + ")", false);
                            break;
                        default:
                            GM.DisplayText("Unknown command", true);
                            break;
                    }
                    break;
                case "clock":
                    if(coms[1] == "pause")
                    {
                        GM.GetGM().gameObject.GetComponent<Clock>().paused = true;
                    }
                    else if (coms[1] == "resume")
                    {
                        GM.GetGM().gameObject.GetComponent<Clock>().paused = false;
                    }
                    else if(coms[1] == "time")
                    {
                        GM.GetGM().gameObject.GetComponent<Clock>().remainingTime = GM.GetFloat(coms[2], GM.GetGM().gameObject.GetComponent<Clock>().remainingTime);
                    }
                    else
                    {
                        GM.DisplayText("Unknown command", true);
                    }
                    break;
                case "scores":
                    if(coms[1] == "show")
                    {
                        GM.GetUI().GetComponent<UI_Scores>().Show();
                    }
                    if(coms[1] == "hide")
                    {
                        GM.GetUI().GetComponent<UI_Scores>().Hide();
                    }
                    if (coms[1] == "save")
                    {
                        GM.GetGM().data.SaveData();
                    }
                    if(coms[1] == "clear")
                    {
                        GM.GetGM().data.ResetData();
                    }
                    if(coms[1] == "pw")
                    {
                        GM.DisplayText("QWERTY", true);
                    }
                    else
                    {
                        GM.DisplayText("Unknown command", true);
                    }
                    break;
                default:
                    GM.DisplayText("Unknown command", true);
                    break;
            }
        }
        catch
        {
            GM.DisplayText("Invalid command.", true);
        }
    }
}
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;
using TMPro;

public class CP_Jetpack : MonoBehaviour
{
    private GM _GM_;
    private GameObject player;
    public Slider slider;
    public TMP_InputField inputField;
    public Toggle toggle;
    private PlayerMove pm;

    void Start()
    {
        _GM_ = GameObject.FindGameObjectWithTag("GM").GetComponent<GM>();
        player = _GM_.player;
        pm = player.GetComponent<PlayerMove>();
    }

    public void UpdateToggle()
    {
        bool enable = toggle.isOn;
        if (enable)
            player.GetComponent<PlayerModuleManager>().UpdateModule(GetComponent<Stats_Module>().module, 2);
        else
        {
            player.GetComponent<PlayerModuleManager>().UpdateModule(GetComponent<Stats_Module>().module, 1);
        }
    }

    public void UpdateThrustSlider()
    {
        float val = slider.value;
        pm.jetpack_force = val;
        inputField.text = val.ToString();
    }

    public void UpdateThrustInput()
    {
        string val = inputField.text;
        float val2 = GM.GetFloat(val, 0);
        Debug.Log(val +"/"+ val2);
        pm.jetpack_force = val2;
        slider.value = val2;
    }


}
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

[System.Serializable]
public class Item
{
    public string name;
    public string type;
    public float count;
    public GameObject obj;
    public Module module;

    public void Reset(Item item)
    {
        item.name = string.Empty;
        item.type = string.Empty;
        item.count = 0;
        item.obj = null;
        item.module.Reset(module);
    }
}


public class Crate : MonoBehaviour
{
    public bool opened;
    private GM _GM_;
    private bool opened_flag;
    private GameObject player;
    public float accessDistance;
    public GameObject AccessUI;
    public string ID;
    public List<ItemSlot> slots;
    public List<Item> items;


    void Start()
    {
        _GM_ = GM.GetGM();
        player = GameObject.FindGameObjectWithTag("Player");
        RefreshSlots();
    }

    private void Update()
    {
        /*
        if(GM.CompareDistance(transform.position, player.transform.position, accessDistance) <= 0 && Input.GetKeyDown("e") && !opened)
        {
            Access(true);
        }
        */
        if ((GM.CompareDistance(transform.position, player.transform.position, accessDistance) == 1 && opened) || opened_flag && Input.GetKeyDown("e") || opened_flag && Input.GetKey("f") && Input.GetMouseButtonDown(0) || !_GM_.playerAlive)
        {
            Access(false);
        }

        if (opened)
            opened_flag = true;
        else
            opened_flag = false;
        if (opened)
        {
            if (Input.GetKeyDown("1"))
                PickUp(0);
            if (Input.GetKeyDown("2"))
                PickUp(1);
            if (Input.GetKeyDown("3"))
                PickUp(2);
            if (Input.GetKeyDown("4"))
                PickUp(3);
            if (Input.GetKeyDown("5"))
                PickUp(4);
            if (Input.GetKeyDown("6"))
                PickUp(5);
            if (Input.GetKeyDown("7"))
                PickUp(6);
            if (Input.GetKeyDown("8"))
                PickUp(7);
            if (Input.GetKeyDown("g"))
            {
                int count = items.Count;
                if(count > 0)
                {
                    for (int i = 0; i < count; i++)
                    {
                        PickUp(0);
                    }
                }
            }
        }
    }

    public void Access(bool open)
    {
        if (open)
        {
            AccessUI.SetActive(true);
            opened = true;
            RefreshSlots();
        }
        else
        {
            AccessUI.SetActive(false);
            opened = false;
        }
    }

    void RefreshSlots()
    {
        foreach (ItemSlot slot in slots)
        {
            slot.TYPE_ID.text = string.Empty;
            slot.COUNT.text = string.Empty;
        }

        for (int i = 0; i < items.Count; i++)
        {
            slots[i].TYPE_ID.text = " > " + items[i].type + "\n " + items[i].name;
            if (items[i].count != 0)
                slots[i].COUNT.text = "x (" + items[i].count + ")";
        }
    }

    public void PickUp(int index)
    {
        //Debug.Log("Picking Up: " + index);
        if (index >= items.Count)
            return;
        Item item = items[index];
        bool remain = false;
        switch (item.type)
        {
            case "Ammo":
                PlayerWeaponManager wm = player.GetComponent<PlayerWeaponManager>();
                wm.ammo_count[wm.ammo_type.IndexOf(item.name)] += Mathf.RoundToInt(item.count);
                items.Remove(item);
                GM.DisplayText("Picked up: " + item.name + " x (" + item.count + ")", false);
                break;
            case "Health":
                PlayerStats ps = player.GetComponent<PlayerStats>();
                ps.health += item.count;
                items.Remove(item);
                GM.DisplayText("Health += " + item.count, false);
                break;
            case "Fuel":
                PlayerMove pm = player.GetComponent<PlayerMove>();
                float leftover = pm.AddFuel(item.count);
                if (leftover != 0)
                {
                    item.count = leftover;
                    remain = true;
                    GM.DisplayText("Fuel += " + (item.count - leftover), false);
                }
                else
                    GM.DisplayText("Fuel += " + item.count, false);
                items.Remove(item);
                break;
            case "Module":
                PlayerModuleManager mm = player.GetComponent<PlayerModuleManager>();
                if (mm.InsertModule(item.module) == false)
                {
                    remain = true;
                }
                GM.DisplayText("Module Added: " + item.module.ID + " [LV. " + item.module.level + "]", false);
                items.Remove(item);
                break;
            case "Weapon":
                GameObject wp = Instantiate((item.obj), transform.position, Quaternion.identity);
                wp.GetComponent<WeaponStats>()._GM_ = GameObject.FindGameObjectWithTag("GM").GetComponent<GM>();
                wp.GetComponent<WeaponStats>().PickUp(player.GetComponent<PlayerPickUp>().weaponsFolder.transform);
                GM.DisplayText("Picked up: " + item.name, false);
                items.Remove(item);
                break;
            case "Deployable":
                DeployablesManager dm = player.GetComponent<DeployablesManager>();
                dm.dplybles_count[dm.deployables.IndexOf(item.obj)] += (int) item.count;
                GM.DisplayText("Picked up: " + item.name + " GRND x (" + item.count + ")", false);
                items.Remove(item);
                break;
        }
        if (remain)
            items.Add(item);
        RefreshSlots();
    }

    public void PickUp(Item item)
    {
        bool remain = false;
        switch (item.type)
        {
            case "Ammo":
                PlayerWeaponManager wm = player.GetComponent<PlayerWeaponManager>();
                wm.ammo_count[wm.ammo_type.IndexOf(item.name)] += Mathf.RoundToInt(item.count);
                items.Remove(item);
                break;
            case "Health":
                PlayerStats ps = player.GetComponent<PlayerStats>();
                ps.health += item.count;
                items.Remove(item);
                break;
            case "Fuel":
                PlayerMove pm = player.GetComponent<PlayerMove>();
                float leftover = pm.AddFuel(item.count);
                if (leftover != 0)
                {
                    item.count = leftover;
                    remain = true;
                }
                items.Remove(item);
                break;
            case "Module":
                PlayerModuleManager mm = player.GetComponent<PlayerModuleManager>();
                if (mm.InsertModule(item.module) == false)
                {
                    remain = true;
                }
                items.Remove(item);
                break;
            case "Weapon":
                GameObject wp = Instantiate((item.obj), transform.position, Quaternion.identity);
                wp.GetComponent<WeaponStats>()._GM_ = GameObject.FindGameObjectWithTag("GM").GetComponent<GM>();
                wp.GetComponent<WeaponStats>().PickUp(player.GetComponent<PlayerPickUp>().weaponsFolder.transform);
                items.Remove(item);
                break;
        }
        if (remain)
            items.Add(item);

        RefreshSlots();
    }
}
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

[System.Serializable]
public class SimpleItem
{
    public string type;
    public string name;
    [Header("Alter module levels with 'count'")]
    public float count;
}


public class Crate_AutoAdd : MonoBehaviour
{
    public SimpleItem[] items;

    public List<string> itemTypes;
    public List<string> itemNames;
    public List<float> itemCounts;

    private Crate crate;

    void Start()
    {
        crate = GetComponent<Crate>();

        foreach(SimpleItem i in items)
        {
            //Debug.Log(i.type);
            itemTypes.Add(i.type);
            itemNames.Add(i.name);
            itemCounts.Add(i.count);
        }

        crate.items = new List<Item>();
        GM _GM_ = GM.GetGM();

        int m = 0; //Modules index

        for(int i = 0; i < itemNames.Count; i++)
        {
            Item item = new Item();
            item.name = itemNames[i];
            item.count = itemCounts[i];
            item.type = itemTypes[i];
            switch (itemTypes[i])
            {
                case "Ammo":
                    crate.items.Add(item);
                    break;
                case "Health":
                    crate.items.Add(item);
                    break;
                case "Fuel":
                    crate.items.Add(item);
                    break;
                case "Weapon":
                    foreach(Item _GM_I in _GM_.itemsList)
                    {
                        if(_GM_I.name == itemNames[i])
                        {
                            crate.items.Add(_GM_I);
                        }
                    }
                    break;
                case "Deployable":
                    foreach (Item _GM_I in _GM_.itemsList)
                    {
                        if (_GM_I.name == itemNames[i])
                        {
                            Item a = _GM_I;
                            a.count = Mathf.RoundToInt(itemCounts[i]);
                            crate.items.Add(_GM_I);
                        }
                    }
                    break;
                case "Module":
                    foreach (Module _GM_M in _GM_.modulesList)
                    {
                        if (_GM_M.ID == itemNames[i] && _GM_M.level == itemCounts[i])
                        {
                            item.module = _GM_M;
                            item.count = 0;
                            crate.items.Add(item);
                        }
                    }
                    break;
                default:
                    Debug.Log("ERR: Unknown item type. Fuck?");
                    break;

            }
        }
        GetComponent<Crate_AutoAdd>().enabled = false;
    }
}
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;

public class Cursory : MonoBehaviour
{
    public Sprite[] cursorSprites;
    public Sprite[] cursorSprites_Click;

    public int cursorState;
    public bool active;

    // Start is called before the first frame update
    void Start()
    {
        if (active)
            Cursor.visible = false;
        else
            Cursor.visible = true;
    }

    // Update is called once per frame
    void Update()
    {
        if (active)
        {
            Cursor.visible = false;
            //Vector2 movePos = Camera.main.ScreenToWorldPoint(Input.mousePosition);

            transform.position = Input.mousePosition;

            if (Input.GetMouseButton(0))
            {
                GetComponent<Image>().sprite = cursorSprites_Click[cursorState];
            }
            else
            {
                GetComponent<Image>().sprite = cursorSprites[cursorState];
            }

            SetStates();
        }
        else
            Cursor.visible = true;
    }

    void SetStates()
    {
        if (Input.GetKey("f"))
            cursorState = 1;
        else
            cursorState = 0;
    }
}
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEditor;
using System.IO;

public class DataManager : MonoBehaviour
{
    public string path;

    //private StreamWriter writer;
    //private StreamReader reader;
    //public StreamWriter writer;

    private void Awake()
    {
        path = "Assets/Data/Scores.txt";
        
    }

    public void ResetData()
    {
        StreamWriter overwrite = new StreamWriter(path, false);
        overwrite.WriteLine("[SCORES]");
        overwrite.Close();
    }

    public void SaveData()
    {
        StreamWriter overwrite = new StreamWriter("Assets/Data/Scores save file.txt", false);
        StreamReader reader = new StreamReader(path, true);
        
        overwrite.Write(reader.ReadToEnd());
        reader.Close();
        overwrite.Close();
    }

    public void WriteData(string txt)
    {
        
        StreamWriter writer = new StreamWriter(path, true);
        writer.WriteLine(txt);
        writer.Close();
    }

    public string ReadData()
    {
        StreamReader reader = new StreamReader(path, true);
        string txt = reader.ReadToEnd();
        reader.Close();
        return (txt);
    }
}

using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class Decay : MonoBehaviour
{
    public float lifeSpan;
    public float randomRange;

    void Start()
    {
        lifeSpan += Random.Range(0, randomRange);
    }

    void Update()
    {
        lifeSpan -= Time.deltaTime;
        if(lifeSpan <= 0)
        {
            Destroy(gameObject);
        }
    }
}
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class Deployable : MonoBehaviour
{
    public string ID;
}
using System.Collections;
using System.Collections.Generic;
using UnityEngine;


public class DeployablesManager : MonoBehaviour
{
    public bool ACTIVE;

    public Transform spawnPos;

    public List<GameObject> deployables;
    public List<int> dplybles_count;
    public List<string> dplybles_name;
    public List<Sprite> dplybles_IMG;
    public GameObject activeDPLYBL;
    public int activeDPLYBL_count;
    public string activeDPLYBL_name;
    public Sprite activeDPLYBL_IMG;

    // Start is called before the first frame update
    void Start()
    {
        activeDPLYBL = deployables[0];
    }

    // Update is called once per frame
    void Update()
    {
        if (ACTIVE)
            Work();

    }

    void Work()
    {
        activeDPLYBL_count = dplybles_count[deployables.IndexOf(activeDPLYBL)];
        activeDPLYBL_name = dplybles_name[deployables.IndexOf(activeDPLYBL)];
        activeDPLYBL_IMG = dplybles_IMG[deployables.IndexOf(activeDPLYBL)];

        if (Input.GetKeyDown("t"))      //SWITCH DEPLOYABLES WITH 'T'
        {
            if (activeDPLYBL != deployables[deployables.Count - 1])
            {
                int a = 1;  //FAIL SWITCH
                while (true)
                {
                    if ((deployables.IndexOf(activeDPLYBL) + 1) > deployables.Count - 1)
                        break;
                    a += 1;
                    int count = 0;
                    foreach (int i in dplybles_count)
                        count += i;
                    if (count == 0)
                        break;
                    else
                    //Debug.Log("IN LOOP: " + (deployables.IndexOf(activeDPLYBL) + 1));
                    //Debug.Log("IN: " + a);
                    activeDPLYBL = deployables[deployables.IndexOf(activeDPLYBL) + 1];
                    if (dplybles_count[deployables.IndexOf(activeDPLYBL)] > 0)
                        break;

                }

                if (a > 100)
                    Debug.Log("Grenades count error: Check script and fix the retarded algorythm");

            }
            else
            {
                activeDPLYBL = deployables[0];
                int a = 0;  //FAIL SWITCH
                while (a < deployables.Count)
                {
                    a += 1;
                    int count = 0;
                    foreach (int i in dplybles_count)
                        count += i;
                    if (count == 0)
                        break;

                    if (dplybles_count[deployables.IndexOf(activeDPLYBL)] > 0)
                        break;
                    else
                    {
                        //Debug.Log("OUT OF LOOP: " + (deployables.IndexOf(activeDPLYBL) + 1));
                        //Debug.Log("OUT: " + a);
                        activeDPLYBL = deployables[deployables.IndexOf(activeDPLYBL) + 1];
                    }
                }
                if (a > 100)
                    Debug.Log("Grenades count error: Check script and fix the retarded algorythm");

            }
        }
        ///////////////////

        if (Input.GetMouseButtonDown(2))
        {
            if (dplybles_count[deployables.IndexOf(activeDPLYBL)] > 0)
            {
                Quaternion spawnRot = Quaternion.identity;

                Vector3 mousePos = Input.mousePosition;
                mousePos.z = 5.23f;

                Vector3 objectPos = Camera.main.WorldToScreenPoint(spawnPos.position);
                mousePos.x = mousePos.x - objectPos.x;
                mousePos.y = mousePos.y - objectPos.y;

                float angle = Mathf.Atan2(mousePos.y, mousePos.x) * Mathf.Rad2Deg;
                spawnRot = Quaternion.Euler(new Vector3(0, 0, angle));

                Instantiate(activeDPLYBL, spawnPos.position, spawnRot);
                dplybles_count[deployables.IndexOf(activeDPLYBL)] -= 1;
            }
            else
            {
                Debug.Log("Grenades slot empty");
            }
        }
    }
}
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class Door : MonoBehaviour
{
    public bool opened;
    private bool opened_flag;

    public float delay;
    private float delay_timer;

    public AudioClip SFX;

    private void Start()
    {
        if (opened)
            Open();
    }

    private void Update()
    {
        if (opened_flag)
        {
            delay_timer += Time.deltaTime;
            if(delay_timer >= delay)
            {
                delay_timer = 0;
                opened_flag = false;
            }
        }
    }

    public void Open()
    {
        if (!opened_flag)
        {
            GetComponent<Animator>().SetBool("Opened", true);
            opened = true;
            opened_flag = true;
            GetComponent<AudioSource>().PlayOneShot(SFX);
        }
    }
    public void Close()
    {
        if (!opened_flag)
        {
            GetComponent<Animator>().SetBool("Opened", false);
            opened = false;
            opened_flag = true;
            GetComponent<AudioSource>().PlayOneShot(SFX);
        }
    }
}
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class Door_DestructionTrigger : MonoBehaviour
{
    public GameObject[] objs;
    public GameObject[] intact_objs;

    void Start()
    {
        
    }

    void Update()
    {
        intact_objs = objs;
        bool closed = false;
        foreach(GameObject obj in intact_objs)
        {
            try
            {
                if (obj.GetComponent<Transform>() != null)
                    closed = true;
            }
            catch
            {
            }
        }
        if (!closed)
        {
            GetComponentInParent<Door>().Open();
            GetComponent<Door_DestructionTrigger>().enabled = false;
        }
    }
}
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class Door_KeyTrigger : MonoBehaviour
{
    private GameObject player;
    public float triggerDistance;

    public GameObject keyR;
    public GameObject keyL;

    void Start()
    {
        player = GameObject.FindGameObjectWithTag("Player");
    }

    void Update()
    {
        Vector2 diff = new Vector2((player.transform.position.x - transform.position.x), (player.transform.position.y - transform.position.y));
        if(diff.x*diff.x + diff.y*diff.y <= triggerDistance * triggerDistance)
        {
            if(player.transform.position.x > transform.position.x)
            {
                keyR.GetComponent<SpriteRenderer>().enabled = true;
                keyL.GetComponent<SpriteRenderer>().enabled = false;
            }
            else
            {
                keyR.GetComponent<SpriteRenderer>().enabled = false;
                keyL.GetComponent<SpriteRenderer>().enabled = true;
            }

            if (Input.GetKeyDown("e"))
            {
                Door door = transform.parent.GetComponent<Door>();
                if (door.opened)
                    door.Close();
                else
                    door.Open();
            }
        }
        else
        {
            keyR.GetComponent<SpriteRenderer>().enabled = false;
            keyL.GetComponent<SpriteRenderer>().enabled = false;
        }
    }
}
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class Drone2Attack : MonoBehaviour
{
    private GM _GM_;
    private GameObject player;
    public LayerMask whatIsGround;
    public LayerMask laserInteract;
    public LayerMask playerLayer;
    public Transform sparkPoint;
    public ParticleSystem ps;
    public AudioSource sparkAudioSource;
    public GameObject contactParticles;
    public LineRenderer lr;
    public SpriteRenderer teslarSR;
    public Color teslarOffColor;
    public Color teslarOnColor;
    public float laserLength;
    private Vector2 laserHitPos;
    public bool attack;
    public float delay;
    private float delay_timer;
    public float delay2;
    private float delay2_timer;
    public float laserDuration;
    private float laserDuration_timer;
    public float damage;
    [HideInInspector]
    public Vector3 tempDir;
    [HideInInspector]
    public GameObject cp;

    private void Start()
    {
        _GM_ = GameObject.FindGameObjectWithTag("GM").GetComponent<GM>();
        player = _GM_.player;
        lr.enabled = false;
        tempDir = player.transform.position - sparkPoint.position;
        cp = null;
        teslarSR.color = teslarOffColor;
    }

    void Update()
    {
        if (attack)
        {
            Attack();
        }
        else
        {
            lr.enabled = false;
            ps.Clear();
            ps.Stop();
        }
    }

    void Attack()
    {
        
        delay_timer += Time.deltaTime;
        if(delay_timer >= delay)
        {
            delay2_timer += Time.deltaTime;
            if (delay2_timer >= delay2)
            {
                GetComponent<Rigidbody2D>().velocity = new Vector2(0, GetComponent<Rigidbody2D>().velocity.y);
                GetComponent<DroneMovement>().chase = false;
                RaycastHit2D hit = Physics2D.Raycast(sparkPoint.position, tempDir, laserLength, laserInteract);
                if (hit.collider != null)
                {
                    laserHitPos = hit.point;
                }
                else
                {
                    float a = tempDir.y / -tempDir.x;
                    Vector2 endPos;
                    if (tempDir.x < 0)
                    {
                        endPos = new Vector2(sparkPoint.position.x - 50, sparkPoint.position.y + 50 * a);
                    }
                    else
                    {
                        endPos = new Vector2(sparkPoint.position.x + 50, sparkPoint.position.y - 50 * a);
                    }
                    laserHitPos = endPos;
                }
                lr.enabled = true;
                lr.SetPosition(0, sparkPoint.position);
                lr.SetPosition(1, laserHitPos);
                laserDuration_timer += Time.deltaTime;

                if(sparkAudioSource.isPlaying == false)
                    sparkAudioSource.Play();

                Vector3 targ = laserHitPos;
                targ.z = 0f;

                Vector2 objectPos = sparkPoint.position;
                targ.x = targ.x - objectPos.x;
                targ.y = targ.y - objectPos.y;

                float angle = Mathf.Atan2(targ.y, targ.x) * Mathf.Rad2Deg;
                sparkPoint.rotation = Quaternion.Euler(new Vector3(sparkPoint.rotation.x, 0, angle));
                    
                
                if (!ps.isPlaying)
                {
                    ps.Play();
                    cp = Instantiate(contactParticles, laserHitPos, Quaternion.identity);
                }
                try
                {
                    cp.transform.position = laserHitPos;
                }
                catch { }

                teslarSR.color = teslarOnColor;

                RaycastHit2D hit2 = Physics2D.Raycast(sparkPoint.position, tempDir, laserLength, laserInteract);
                if(hit2.collider != null && hit2.collider.tag == "Player")
                {
                    player.GetComponent<PlayerStats>().TakeDamage(damage * Time.deltaTime);
                }

                if(laserDuration_timer >= laserDuration)
                {
                    delay_timer = 0;
                    delay2_timer = 0;
                    laserDuration_timer = 0;
                    lr.enabled = false;
                    sparkAudioSource.Stop();
                    ps.Stop();
                    Destroy(cp);
                    teslarSR.color = teslarOffColor;
                    GetComponent<DroneMovement>().chase = true;
                }
            }
        }
        else
        {
            ResetTempDir();
        }
    }

    public void ResetTempDir()
    {
        tempDir = player.transform.position - sparkPoint.position;
    }
}
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class DroneAnimation : MonoBehaviour
{
    private Animator anim;

    private void Start()
    {
        anim = GetComponent<Animator>();
    }

    public void Alerted(bool alerted)
    {
        if (alerted)
            anim.SetBool("Alerted", true);
        else
            anim.SetBool("Alerted", false);
    }
}
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class DroneAttack : MonoBehaviour
{
    private GM _GM_;
    private GameObject player;

    public AudioClip shotSFX;

    public GameObject gun;
    public GameObject bullet;
    public Transform barrelEnd;

    public bool attack;

    private Quaternion gunInitRot;
    public float aimSpeed;

    public float accuracy;
    public float damage;
    public float bulletSpeed;
    public float fireRate;
    private float fireRate_timer;

    public float maxAmmoCount;
    public float ammoCount;
    public float reloadSpeed;
    private float reloadSpeed_timer;

    // Start is called before the first frame update
    void Start()
    {
        _GM_ = GameObject.FindGameObjectWithTag("GM").GetComponent<GM>();
        player = _GM_.player;
        ammoCount = maxAmmoCount;
        gunInitRot = gun.transform.rotation;
    }

    // Update is called once per frame
    void FixedUpdate()
    {
        if (attack)
            AimGun();
        else
        {
            if(transform.localEulerAngles.y != 0)
                gunInitRot.y = 180;
            else
                gunInitRot.y = 0;
            gun.transform.rotation = gunInitRot;
        }
    }

    private void Update()
    {
        if(attack)
            UseGun();
    }

    void AimGun()
    {
        Vector3 targ = player.transform.position;
        targ.z = 0f;

        Vector2 objectPos = gun.transform.position;
        targ.x = targ.x - objectPos.x;
        targ.y = targ.y - objectPos.y;

        float angle = Mathf.Atan2(targ.y, targ.x) * Mathf.Rad2Deg;
        gun.transform.rotation = Quaternion.Lerp(gun.transform.rotation, Quaternion.Euler(new Vector3(gun.transform.rotation.x, 0, angle)), aimSpeed);
    }

    void UseGun()
    {
        fireRate_timer += Time.deltaTime;
        if (fireRate_timer >= fireRate && ammoCount > 0)
        {
            Fire();

            ammoCount -= 1;

            fireRate_timer = 0;
        }

        else if (ammoCount <= 0)
        {
            reloadSpeed_timer += Time.deltaTime;
            if (reloadSpeed_timer >= reloadSpeed)
            {
                ammoCount = maxAmmoCount;
                reloadSpeed_timer = 0;
            }
        }

        /////////////////////////////   Internal Functions
        void Fire()
        {
            GameObject thisBullet = bullet;
            EnemyBullet2 thisBulletScript = thisBullet.GetComponent<EnemyBullet2>();

            thisBulletScript.accuracy = accuracy;
            thisBulletScript.damage = damage;
            thisBulletScript.speed = bulletSpeed;

            Vector3 bulletRotation = gun.transform.localEulerAngles;
            bulletRotation.y = 0;

            GetComponent<AudioSource>().PlayOneShot(shotSFX);

            Instantiate(thisBullet, barrelEnd.position, Quaternion.Euler(bulletRotation));
        }
    }
}
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class DroneMovement : MonoBehaviour
{
    private GM _GM_;
    private Rigidbody2D rb;
    private GameObject player;
    private DroneAttack attackScript;
    private Drone2Attack attackScript2;
    private DroneAnimation anim;

    public int droneType;

    public LayerMask whatIsGround;

    public bool active = true;
    public bool chase = true;

    public AudioClip alertSFX;

    public bool hover = true;
    public float hoverHeight;
    public float hoverForce;
    public float speed;
    public float acceleration;
    public float retreat_acceleration;

    public string state;

    [Header("Chase")]
    public float alertDistance;
    public float shot_alertDistance;
    public float stopDistance;
    public float retreatDistance;

    void Start()
    {
        _GM_ = GameObject.FindGameObjectWithTag("GM").GetComponent<GM>();
        player = _GM_.player;
        rb = GetComponent<Rigidbody2D>();
        if (droneType == 1)
            attackScript = GetComponent<DroneAttack>();
        else
            attackScript2 = GetComponent<Drone2Attack>();

        anim = GetComponent<DroneAnimation>();
    }

    void FixedUpdate()
    {
        if(hover)
            Hover();

        if(_GM_.playerAlive == false)
        {
            active = false;
        }

        if (active && chase)
        {
            RaycastHit2D wallInSight = Physics2D.Raycast(transform.position, player.transform.position - transform.position, Vector2.Distance(transform.position, player.transform.position), whatIsGround);
            if (GM.CompareDistance(transform.position, player.transform.position, alertDistance) <= 0 && wallInSight.collider == null)
            {
                if (state != "Chasing")
                    GetComponent<AudioSource>().PlayOneShot(alertSFX);

                state = "Chasing";
                Chase();
                if(droneType == 1)
                    attackScript.attack = true;
                else
                {
                    attackScript2.attack = true;
                    attackScript2.ResetTempDir();
                }
                anim.Alerted(true);
            }
            else
            {
                if (droneType == 1)
                    attackScript.attack = false;
                else
                    attackScript2.attack = false;
                anim.Alerted(false);
            }
        }
        else if(!active)
        {
            if (droneType == 1)
                attackScript.attack = false;
            else
                attackScript2.attack = false;
            anim.Alerted(false);
        }
    }

    void Hover()
    {
        RaycastHit2D ground = Physics2D.Raycast(transform.position, -Vector2.up, hoverHeight, whatIsGround);
        if (ground.collider != null)
        {
            if (transform.position.y - ground.point.y < hoverHeight)
            {
                rb.velocity = new Vector2(rb.velocity.x, rb.velocity.y + (hoverHeight - (transform.position.y - ground.point.y)) * hoverForce);
            }
        }
    }
    
    void Chase()
    {
        bool facingRight;
        //////////////////////////////////Face player

        if(player.transform.position.x - transform.position.x <= 0)
        {
            Quaternion rotator = transform.localRotation;
            rotator.y = 180;
            transform.localRotation = rotator;
            facingRight = false;
        }
        else
        {
            Quaternion rotator = transform.localRotation;
            rotator.y = 0;
            transform.localRotation = rotator;
            facingRight = true;
        }
        ////////////////////////////////////////////////////

        if(GM.CompareDistance(transform.position, player.transform.position, stopDistance) == 1)
        {
            TravelTowardsPlayer();
        }
        else if(GM.CompareDistance(transform.position, player.transform.position, retreatDistance) == 1)
        {
            Stop();
        }
        else
        {
            if (facingRight)
            {
                rb.velocity = new Vector2(rb.velocity.x - retreat_acceleration, rb.velocity.y);
            }
            else
            {
                rb.velocity = new Vector2(rb.velocity.x + retreat_acceleration, rb.velocity.y);
            }
        }

        //////////////////////////////////////// Internal Functions
        void TravelTowardsPlayer()
        {
            if (facingRight)
            {
                if (rb.velocity.x < speed && speed - rb.velocity.x > acceleration)
                {
                    rb.velocity = new Vector2(rb.velocity.x + acceleration, rb.velocity.y);
                }
                else if (rb.velocity.x < speed && speed - rb.velocity.x <= acceleration)
                {
                    rb.velocity = new Vector2(rb.velocity.x + (speed - rb.velocity.x), rb.velocity.y);
                }
            }
            else
            {
                if (rb.velocity.x > -speed && -speed - rb.velocity.x < -acceleration)
                {
                    rb.velocity = new Vector2(rb.velocity.x - acceleration, rb.velocity.y);
                }
                else if (rb.velocity.x > -speed && -speed - rb.velocity.x >= -acceleration)
                {
                    rb.velocity = new Vector2(rb.velocity.x + (-speed - rb.velocity.x), rb.velocity.y);
                }
            }
        }

        void Stop()
        {
            if (facingRight)
            {
                if (rb.velocity.x > acceleration)
                    rb.velocity = new Vector2(rb.velocity.x - acceleration, rb.velocity.y);
                //else
                   // rb.velocity = new Vector2(0, rb.velocity.y);
            }
            else
            {
                if (rb.velocity.x < -acceleration)
                    rb.velocity = new Vector2(rb.velocity.x + acceleration, rb.velocity.y);
                //else
                    //rb.velocity = new Vector2(0, rb.velocity.y);
            }
        }
    }
}
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class Elevator : MonoBehaviour
{
    private GM _GM_;
    public List<Transform> Positions;
    public List<GameObject> Sprites;
    public Transform init_position;
    private Transform current_position;
    private GameObject player;
    public GameObject pressKey;
    public bool useButton;
    public GameObject[] buttons;
    public GameObject[] pressKeys;
    public Sprite buttonOn;
    public Sprite buttonOff;

    public float speed;

    public AudioSource SFX_stop;

    
    public int targetPosition;
    private int movingPosition;

    private bool move;

    // Start is called before the first frame update
    void Start()
    {
        _GM_ = GameObject.FindGameObjectWithTag("GM").GetComponent<GM>();
        player = _GM_.player;
        transform.position = init_position.position;
        if (!Positions.Contains(init_position))
        {
            Debug.Log("List of positions does not contain init_position: " + init_position + ", setting init_position to Positions[0] <" + gameObject + ">");
            init_position = Positions[0];
        }
        current_position = init_position;
        Sprites[0].SetActive(true);
        Sprites[1].SetActive(false);
    }

    // Update is called once per frame
    void FixedUpdate()
    {
        if (GM.CompareDistance(transform.position, player.transform.position, 0.5f) <= 0 && !move)
            pressKey.SetActive(true);
        else
            pressKey.SetActive(false);

        if (GM.CompareDistance(transform.position, player.transform.position, 0.5f) <= 0 && Input.GetKeyDown("e"))
        {
            move = true;
        }
        if (move)
        {
            if(current_position == Positions[0])
            {
                Move(Positions[1].position);
                movingPosition = 1;
                Sprites[1].SetActive(true);
                Sprites[0].SetActive(false);
            }
            else
            {
                Move(Positions[0].position);
                movingPosition = 0;
                Sprites[0].SetActive(true);
                Sprites[1].SetActive(false);
            }
        }
    }

    private void Update()
    {
        if (useButton)
        {
            if (GM.CompareDistance(buttons[0].transform.position, player.transform.position, 1.0f) <= 0)
            {
                pressKeys[0].SetActive(true);
                if (Input.GetKeyDown("e") && targetPosition == 1)
                {
                    buttons[0].GetComponent<SpriteRenderer>().sprite = buttonOn;
                    buttons[1].GetComponent<SpriteRenderer>().sprite = buttonOff;
                    move = true;
                    GM.DisplayText2("[Elevator called]", true);
                }
            }
            else
            {
                pressKeys[0].SetActive(false);
            }
            if (GM.CompareDistance(buttons[1].transform.position, player.transform.position, 1.0f) <= 0)
            {
                pressKeys[1].SetActive(true);
                if (Input.GetKeyDown("e") && targetPosition == 0)
                {
                    buttons[0].GetComponent<SpriteRenderer>().sprite = buttonOff;
                    buttons[1].GetComponent<SpriteRenderer>().sprite = buttonOn;
                    move = true;
                    GM.DisplayText2("[Elevator called]", true);
                }
            }
            else
            {
                pressKeys[1].SetActive(false);
            }
        }
    }

    private void Move(Vector2 position)
    {
        if (!GetComponent<AudioSource>().isPlaying)
        {
            SFX_stop.Stop();
            GetComponent<AudioSource>().Play();
        }

        if (Mathf.Abs(transform.position.y - position.y) > 0.05)
        {
            GetComponent<Rigidbody2D>().MovePosition(Vector2.MoveTowards(transform.position, position, speed));
        }
        else
        {
            move = false;
            GetComponent<AudioSource>().Stop();
            SFX_stop.Play();

            if (current_position == Positions[0])
            {
                current_position = Positions[1];
                targetPosition = 1;
            }

            else
            {
                current_position = Positions[0];
                targetPosition = 0;
            }
        }
    }
}
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class Enemy1_Animation : MonoBehaviour
{
    private Animator anim;
    // Start is called before the first frame update
    void Start()
    {
        anim = GetComponent<Animator>();
    }

    // Update is called once per frame
    void Update()
    {
        
    }

    public void Move(bool enable)
    {
        if (enable)
            anim.SetInteger("Speed", 1);
        else
            anim.SetInteger("Speed", 0);
    }
    public void Shoot()
    {
        anim.SetTrigger("Shoot");
    }
}
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class Enemy1_Attack : MonoBehaviour
{
    private Enemy1_Animation e1anim;

    public AudioClip shotSFX;

    public GameObject projectile;
    public Transform barrelEnd;
    public float damage;
    public float bulletSpeed;
    public float accuracy;

    public float reloadSpeed;
    private float reload_timer;

    public int magSize;
    public float magReloadSpeed;
    private float magReload_timer;
    public int ammo;

    public bool attack;

    private void Start()
    {
        e1anim = GetComponent<Enemy1_Animation>();
        ammo = magSize;
    }

    void Update()
    {
        if (attack)
            Attack();
    }

    void Attack()
    {
        reload_timer += Time.deltaTime;
        if(ammo > 0)
        {
            if (reload_timer >= reloadSpeed)
            {
                e1anim.Shoot();
                GameObject thisBullet = projectile;
                EnemyBullet thisBulletScript = thisBullet.GetComponent<EnemyBullet>();
                thisBulletScript.wielder = gameObject;
                thisBulletScript.damage = damage;
                thisBulletScript.speed = bulletSpeed;
                thisBulletScript.accuracy = accuracy;
                Instantiate(thisBullet, barrelEnd.position, Quaternion.identity);

                GetComponent<AudioSource>().PlayOneShot(shotSFX);

                ammo -= 1;
                reload_timer = 0;
            }
        }
        else
        {
            magReload_timer += Time.deltaTime;
            if(magReload_timer >= magReloadSpeed)
            {
                ammo = magSize;
                magReload_timer = 0;
            }
        }
        
    }
}
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class EnemyBullet : MonoBehaviour
{
    private GM _GM_;
    private Rigidbody2D rb;
    public GameObject wielder;
    public float accuracy;
    public float speed;
    public float damage;

    public float life;

    public List<string> ignoreCollisionTags;

    public List<string> particleName;
    public List<GameObject> particles;
    public GameObject bulletContact;
    public bool hitPlayer_Flag;

    // Start is called before the first frame update
    void Start()
    {
        _GM_ = GameObject.FindGameObjectWithTag("GM").GetComponent<GM>();
        rb = GetComponent<Rigidbody2D>();

        transform.Rotate(0, 0, Random.Range(-1.0f, 1.0f) * accuracy);
        //Debug.Log("SCALE: " + wielder.transform.localScale.x);

        transform.localScale = wielder.transform.localScale;
        rb.velocity = transform.right * transform.localScale.x * speed;

        particleName = _GM_.chunkParticles_names;
        particles = _GM_.chunkParticles;
    }

    // Update is called once per frame
    void Update()
    {
        life -= Time.deltaTime;
        if(life <= 0) { Destroy(gameObject); }
    }

    private void OnTriggerEnter2D(Collider2D other)
    {
        BulletCollision(other);
    }

    private void OnCollisionEnter2D(Collision2D other)
    {
        BulletCollision(other.collider);
    }

    void BulletCollision(Collider2D other)
    {
        
        if (other.GetComponent<Particle_Stats>() != null)
            SpawnParticles();

        switch (other.tag)
        {
            case "Ground":
                Instantiate(bulletContact, transform.position, transform.rotation);
                Destroy(gameObject);
                break;

            default:

                if (!ignoreCollisionTags.Contains(other.tag))
                {
                    if (other.CompareTag("Player/Hitbox") && !hitPlayer_Flag)
                    {
                        //Debug.Log("Hit Player");
                        Instantiate(bulletContact, transform.position, transform.rotation);
                        HitPlayer();
                    }

                    if (other.gameObject.layer == LayerMask.NameToLayer("Prop/Interactive"))
                    {
                        Instantiate(bulletContact, transform.position, transform.rotation);
                        if (other.GetComponent<BreakableProp>() != null)
                        {
                            other.GetComponent<BreakableProp>().TakeDamage(damage);
                        }
                    }

                    Destroy(gameObject);
                    //Debug.Log("Bullet Destroyed");
                }
                break;
        }

        /////////////////////////// Functions   함수들

        void SpawnParticles()   ///////////// 벽, 땅 등 파편
        {
            if (particleName.Contains(other.GetComponent<Particle_Stats>().particle))
            {
                Instantiate(particles[particleName.IndexOf(other.GetComponent<Particle_Stats>().particle)], transform.position, Quaternion.identity);
            }
            else
            {
                Debug.Log("ERR: Unknown particle name [" + other.GetComponent<Particle_Stats>().particle + "]");
                Instantiate(particles[particleName.IndexOf("Default")], transform.position, Quaternion.identity);
            }

        }

        void HitPlayer()     ///////////// 적을 맞췄을 때: 
        {
            GameObject Player = other.gameObject.transform.parent.gameObject;

            Player.GetComponent<PlayerStats>().TakeDamage(damage);
            
            hitPlayer_Flag = true;
        }
    }
}
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class EnemyBullet2 : MonoBehaviour
{
    private GM _GM_;
    private Rigidbody2D rb;
    public GameObject wielder;
    public float accuracy;
    public float speed;
    public float damage;

    public float life;

    public List<string> ignoreCollisionTags;

    public List<string> particleName;
    public List<GameObject> particles;
    public GameObject bulletContact;
    public bool hitPlayer_Flag;

    // Start is called before the first frame update
    void Start()
    {
        _GM_ = GameObject.FindGameObjectWithTag("GM").GetComponent<GM>();
        rb = GetComponent<Rigidbody2D>();

        transform.Rotate(0, 0, Random.Range(-1.0f, 1.0f) * accuracy);

        rb.velocity = transform.right * speed;

        particleName = _GM_.chunkParticles_names;
        particles = _GM_.chunkParticles;
    }

    // Update is called once per frame
    void Update()
    {
        life -= Time.deltaTime;
        if(life <= 0) { Destroy(gameObject); }
    }

    private void OnTriggerEnter2D(Collider2D other)
    {
        BulletCollision(other);
    }

    private void OnCollisionEnter2D(Collision2D other)
    {
        BulletCollision(other.collider);
    }

    void BulletCollision(Collider2D other)
    {
        
        if (other.GetComponent<Particle_Stats>() != null)
            SpawnParticles();

        switch (other.tag)
        {
            case "Ground":
                Instantiate(bulletContact, transform.position, transform.rotation);
                Destroy(gameObject);
                break;

            default:

                if (!ignoreCollisionTags.Contains(other.tag))
                {
                    if (other.CompareTag("Player/Hitbox") && !hitPlayer_Flag)
                    {
                        //Debug.Log("Hit Player");
                        Instantiate(bulletContact, transform.position, transform.rotation);
                        HitPlayer();
                    }

                    if (other.gameObject.layer == LayerMask.NameToLayer("Prop/Interactive"))
                    {
                        Instantiate(bulletContact, transform.position, transform.rotation);
                        if (other.GetComponent<BreakableProp>() != null)
                        {
                            other.GetComponent<BreakableProp>().TakeDamage(damage);
                        }
                    }

                    Destroy(gameObject);
                    //Debug.Log("Bullet Destroyed");
                }
                break;
        }

        /////////////////////////// Functions   함수들

        void SpawnParticles()   ///////////// 벽, 땅 등 파편
        {
            if (particleName.Contains(other.GetComponent<Particle_Stats>().particle))
            {
                Instantiate(particles[particleName.IndexOf(other.GetComponent<Particle_Stats>().particle)], transform.position, Quaternion.identity);
            }
            else
            {
                Debug.Log("ERR: Unknown particle name [" + other.GetComponent<Particle_Stats>().particle + "]");
                Instantiate(particles[particleName.IndexOf("Default")], transform.position, Quaternion.identity);
            }

        }

        void HitPlayer()     ///////////// 적을 맞췄을 때: 
        {
            GameObject Player = other.gameObject.transform.parent.gameObject;

            Player.GetComponent<PlayerStats>().TakeDamage(damage);
            
            hitPlayer_Flag = true;
        }
    }
}
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class EnemyMovement : MonoBehaviour
{

    private GameObject player;
    private GM _GM_;
    private Enemy1_Attack e1attack;
    private Enemy1_Animation e1anim;

    private Rigidbody2D rb;

    public Collider2D radar;
    public Collider2D sight;
    public Collider2D cliffCheck;
    public Transform eyes;
    public LayerMask whatIsGround;

    public bool active = true;
    public bool move = true;

    [Header("Stats 스탯")]
    public float attackDistance;

    public float speed_Idle;
    public float speed_Patrol;
    public float speed_Chase;

    [Header("Patrol State 경비 상태")]
    public List<Transform> patrol_MovePos;
    private Transform patrol_ActiveMovePos;
    public float patrol_Delay;
    private float patrol_Delay_Timer;
    public float patrol_Timeout;
    private float patrol_Timeout_Timer;
    private bool patrol_Moving = true;

    [Header("Idle, Patrol, Chase")]
    public string state;

    Vector2 movePos;

    bool facingRight;
    bool lastFacingRight;

    public float faceDirectionDelay;
    private float faceDirection_timer;

    void Start()
    {
        _GM_ = GameObject.FindGameObjectWithTag("GM").GetComponent<GM>();
        player = _GM_.player;
        e1attack = GetComponent<Enemy1_Attack>();
        e1anim = GetComponent<Enemy1_Animation>();

        patrol_ActiveMovePos = patrol_MovePos[0];

        rb = GetComponent<Rigidbody2D>();
    }

    void Update()
    {
        if (_GM_.playerAlive == false)
        {
            active = false;
        }

        if (active)
        {
            SetState();
        }
        else
        {
            e1attack.attack = false;
            if (state == "Chase")
                state = "Idle";
            else
                state = "Patrol";
        }
    }

    void SetState()
    {
        RaycastHit2D wallInSight = Physics2D.Raycast(eyes.position, player.transform.position - transform.position, Vector2.Distance(transform.position, player.transform.position), whatIsGround);

        if (radar.IsTouching(GameObject.FindGameObjectWithTag("Player/Hitbox").GetComponent<Collider2D>()) && wallInSight.collider == null)
        {
            state = "Chase";
            Vector2 xSight = player.transform.position;
            //xSight.y = eyes.position.y;
            if (Physics2D.Raycast(eyes.position, transform.right * transform.localScale.x, Mathf.Abs(eyes.position.x - player.transform.position.x), whatIsGround).collider == null)
            {
                e1attack.attack = true;
            }
            else
            {
                e1attack.attack = false;
            }
        }
        else if ((!radar.IsTouching(GameObject.FindGameObjectWithTag("Player/Hitbox").GetComponent<Collider2D>()) && !sight.IsTouching(GameObject.FindGameObjectWithTag("Player/Hitbox").GetComponent<Collider2D>())) || wallInSight.collider != null)
        {
            e1attack.attack = false;
            if (state == "Chase")
                state = "Idle";
            else
                state = "Patrol";
        }
    }

    void FixedUpdate()
    {
        if (move)
        {
            if (state == "Idle")
                Idle();
            if (state == "Patrol")
                Patrol();
            if (state == "Chase")
                Chase();
        }
    }

    void FaceDirection(bool faceRight)
    {
        if (faceRight)
        {
            Vector3 scaler = transform.localScale;
            scaler.x = 1;
            transform.localScale = scaler;
        }
        else
        {
            Vector3 scaler = transform.localScale;
            scaler.x = -1;
            transform.localScale = scaler;
        }
    }

    void TravelInDirection(float speed, bool faceRight) 
    {
        if(speed != 0)
            e1anim.Move(true);
        else
            e1anim.Move(false);
        if (faceRight)
        {
            rb.velocity = new Vector2(speed, rb.velocity.y);
        }
        else
        {
            rb.velocity = new Vector2(speed * -1, rb.velocity.y);
        }
    }


    void Idle()
    {

    }

    void Patrol()
    {
        if(Mathf.Abs(transform.position.x - patrol_ActiveMovePos.position.x) <= 0.3f)
        {
            patrol_Moving = false;
        }
        if(Mathf.Abs(transform.position.x - patrol_ActiveMovePos.position.x) > 0.3f)
        {
            patrol_Moving = true;
        }
        if(patrol_Moving)
        {
            if (patrol_ActiveMovePos.position.x > transform.position.x)
            {
                FaceDirection(true);
                TravelInDirection(speed_Patrol, true);
            }
            else
            {
                FaceDirection(false);
                TravelInDirection(speed_Patrol, false);
            }
        }
        else
        {
            TravelInDirection(0, true);
            if (patrol_Delay_Timer >= patrol_Delay)
            {
                SetNextMovePos();
                ResetVariables();
            }
            else
            {
                patrol_Delay_Timer += 1;
            }
        }

        patrol_Timeout_Timer += 1;

        if(patrol_Timeout_Timer >= patrol_Timeout)
        {
            SetNextMovePos();
            ResetVariables();
        }
        
        void SetNextMovePos()
        {
            if (patrol_MovePos.IndexOf(patrol_ActiveMovePos) == patrol_MovePos.Count - 1)
                patrol_ActiveMovePos = patrol_MovePos[0];
            else
                patrol_ActiveMovePos = patrol_MovePos[patrol_MovePos.IndexOf(patrol_ActiveMovePos) + 1];
        }

        void ResetVariables()
        {
            patrol_Moving = true;
            patrol_Delay_Timer = 0.0f;
            patrol_Timeout_Timer = 0.0f;
        }
    }


    void Chase()
    {
        if (player.transform.position.x > transform.position.x)
        {
            facingRight = true;
            if (lastFacingRight != facingRight)
            {
                faceDirection_timer += 1;
                if (faceDirection_timer >= faceDirectionDelay)
                {
                    lastFacingRight = facingRight;
                    faceDirection_timer = 0;
                }
            }
            else
            {
                FaceDirection(true);
                FollowPlayer(true);
            }
        }
        else
        {
            facingRight = false;
            if (lastFacingRight != facingRight)
            {
                faceDirection_timer += 1;
                if (faceDirection_timer >= faceDirectionDelay)
                {
                    lastFacingRight = facingRight;
                    faceDirection_timer = 0;
                }
            }
            else
            {
                FaceDirection(false);
                FollowPlayer(false);
            }
        }

        void FollowPlayer(bool faceRight)
        {
            if (cliffCheck.IsTouchingLayers(whatIsGround) && Vector2.Distance(transform.position, player.transform.position) > attackDistance)
            {
                TravelInDirection(speed_Chase, faceRight);
            }
            else if (cliffCheck.IsTouchingLayers(whatIsGround) && Vector2.Distance(transform.position, player.transform.position) <= attackDistance)
            {
                TravelInDirection(0.0f, faceRight);
            }
            else
            {
                TravelInDirection(0.0f, faceRight);
            }
        }
    }

    
}
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class EnemyStats : MonoBehaviour
{
    private GM _GM_;
    private GameObject player;
    private Rigidbody2D rb;

    [Header("Droid, Drone etc")]
    public string type;
    public bool deathCount;

    public float maxHealth;
    public float health;
    public bool alive = true;

    public bool destroyOnDeath;
    public GameObject[] corpse;
    public float corpseSpawnOffset;

    public bool explodeOnDeath;
    public GameObject explosion;
    public float explosionForce;
    public float explosionRadius;
    public float explosionDuration;

    //STUN effect
    public bool resistStun;
    [Header("damage * (1 - resistance) = applied damage")]
    public float stunResistance;
    
    private float stunDuration;
    private float stunDamage;
    private GameObject stun_effect;

    //FLAME effect
    public bool resistBurn;
    [Header("damage * (1 - resistance) = applied damage")]
    public float burnResistance;

    private float burnDuration;
    private float burnDamage;
    private GameObject burn_effect;

    // Start is called before the first frame update
    void Start()
    {
        _GM_ = GameObject.FindGameObjectWithTag("GM").GetComponent<GM>();
        player = _GM_.player;
        rb = GetComponent<Rigidbody2D>();

        //TakeDamage(999999999);
    }

    // Update is called once per frame
    void Update()
    {
        if(health <= 0 && alive)
        {
            alive = false;
            Die();
            health = 0;
        }

        //Burn effect
        if(burnDuration > 0)
        {
            TakeDamage(burnDamage * Time.deltaTime * (1 - burnResistance));
            burnDuration -= Time.deltaTime;
        }
        else
        {
            if (burn_effect != null)
                Destroy(burn_effect);
            burnDuration = 0;
            burnDamage = 0;
        }

        //Stun effect
        if(stunDuration > 0)
        {
            TakeDamage(stunDamage * Time.deltaTime * (1 - stunResistance));
            stunDuration -= Time.deltaTime;
        }
        else
        {
            if (GetComponent<DroneAttack>() != null)
            {
                DroneMovement move = GetComponent<DroneMovement>();
                move.hover = true;

                GetComponent<DroneAttack>().enabled = true;
            }

            if (GetComponent<Drone2Attack>() != null)
            {
                DroneMovement move = GetComponent<DroneMovement>();
                move.hover = true;

                GetComponent<Drone2Attack>().enabled = true;
            }

            if (GetComponent<EnemyMovement>() != null)
            {
                EnemyMovement move = GetComponent<EnemyMovement>();

                move.active = true;
                move.move = true;

                GetComponent<Enemy1_Attack>().enabled = true;
            }
            if (type == "Turret")
            {
                GetComponent<Turret1>().enabled = true;
            }

            if (stun_effect != null)
                Destroy(stun_effect);
            stunDamage = 0;
            stunDuration = 0;
        }
    }

    public void TakeDamage(float damage)
    {
        //Debug.Log("[" + gameObject.name + "] : Taken damage: " + damage);
        health -= damage;

        if ((type == "Drone" ) || (type == "Drone2"))
        {
            GetComponent<DroneMovement>().alertDistance = GetComponent<DroneMovement>().shot_alertDistance;
        }
        if((type == "Turret"))
        {
            GetComponent<Turret1>().alertDistance = GetComponent<Turret1>().alertDistance_shot;
        }
    }

    public void Stunned(float randomizer, float duration, float damage, GameObject effect)
    {
        if (!resistStun)
        {
            if (GetComponent<DroneAttack>() != null)
            {
                DroneMovement move = GetComponent<DroneMovement>();
                move.hoverForce += Random.Range(-randomizer, randomizer);
                move.hoverHeight += Random.Range(-randomizer, randomizer);
                move.speed += Random.Range(-randomizer, randomizer);
                move.speed += Random.Range(-randomizer, randomizer);
                move.acceleration += Random.Range(-randomizer, randomizer);
                move.retreat_acceleration += Random.Range(-randomizer, randomizer);

                move.hover = false;

                GetComponent<DroneAttack>().enabled = false;
                GetComponent<DroneAttack>().aimSpeed += Random.Range(-randomizer, randomizer);
            }

            if (GetComponent<Drone2Attack>() != null)
            {
                DroneMovement move = GetComponent<DroneMovement>();
                move.hoverForce += Random.Range(-randomizer, randomizer);
                move.hoverHeight += Random.Range(-randomizer, randomizer);
                move.speed += Random.Range(-randomizer, randomizer);
                move.speed += Random.Range(-randomizer, randomizer);
                move.acceleration += Random.Range(-randomizer, randomizer);
                move.retreat_acceleration += Random.Range(-randomizer, randomizer);

                move.hover = false;

                GetComponent<Drone2Attack>().enabled = false;
            }

            if (GetComponent<EnemyMovement>() != null)
            {
                EnemyMovement move = GetComponent<EnemyMovement>();

                //Debug.Log("ZAAAP");
                move.active = false;
                move.move = false;
                rb = GetComponent<Rigidbody2D>();
                rb.velocity = new Vector2(0, rb.velocity.y);

                GetComponent<Enemy1_Attack>().enabled = false;
                GetComponent<Enemy1_Animation>().Move(false);
            }

            if (type == "LandMine")
            {
                GetComponent<LandMine>().explode = true;
            }

            if (type == "Turret")
            {
                GetComponent<Turret1>().enabled = false;
            }

            if (stunDuration <= 0)
            {
                stun_effect = Instantiate(effect, transform);
                stun_effect.transform.parent = transform;
                stun_effect.transform.localPosition = new Vector2(0, 0);
            }
            if (duration > stunDuration)
                stunDuration = duration;
            if (damage > stunDamage)
                stunDamage = damage;
        }
    }

    public void Burn(float duration, float damage, GameObject effect)
    {
        if (!resistBurn)
        {
            if (burnDuration <= 0)
            {
                burn_effect = Instantiate(effect, transform);
                burn_effect.transform.parent = transform;
                burn_effect.transform.localPosition = new Vector2(0, 0);
            }
            if (duration > burnDuration)
                burnDuration = duration;
            if (damage > burnDamage)
                burnDamage = damage;
        }
    }

    public void Die()
    {
        if(type == "Droid")
        {
            GetComponent<EnemyMovement>().state = "Idle";
            GetComponent<Enemy1_Attack>().enabled = false;
        }
        if(type == "Drone")
        {
            GetComponent<DroneMovement>().enabled = false;
            GetComponent<DroneAttack>().enabled = false;
        }
        if (type == "Drone2")
        {
            GetComponent<DroneMovement>().enabled = false;
            Destroy(GetComponent<Drone2Attack>().cp);
            GetComponent<Drone2Attack>().enabled = false;
        }
        if(type == "LandMine")
        {
            GetComponent<LandMine>().delay = 0;
            GetComponent<LandMine>().explode = true;
        }

        //Rigidbody2D rb = GetComponent<Rigidbody2D>();
        //rb.velocity = new Vector2(0, 0);
        //rb.simulated = false;

        if(corpse != null)
        {
            foreach (GameObject bodyPart in corpse)
            {
                //bodyPart.GetComponent<Rigidbody2D>().velocity = new Vector2(Random.Range(-corpseExplosionForce, corpseExplosionForce), Random.Range(-corpseExplosionForce, corpseExplosionForce));
                Instantiate(bodyPart, transform.position + new Vector3(Random.Range(-corpseSpawnOffset, corpseSpawnOffset), Random.Range(-corpseSpawnOffset, corpseSpawnOffset), 0.0f), Quaternion.identity);
            }
        }
        if (explodeOnDeath)
        {
            GameObject thisExplosion = explosion;
            CircleCollider2D thisCollider =  thisExplosion.GetComponent<CircleCollider2D>();
            PointEffector2D thisEffector = thisExplosion.GetComponent<PointEffector2D>();

            thisCollider.radius = explosionRadius;
            thisEffector.forceMagnitude = explosionForce;

            thisExplosion.GetComponent<Explosion>().duration = explosionDuration;

            Instantiate(explosion, transform.position, Quaternion.identity);
        }

        if (destroyOnDeath)
        {
            Destroy(gameObject);
            if (deathCount)
                _GM_.killCount++;
        }
    }
}
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class Explosion : MonoBehaviour
{
    private GM _GM_;
    public float duration;
    public float lifeSpan;

    public float cameraShake_force;
    public float cameraShake_duration;

    public List<AudioClip> SFXs;

    private void Start()
    {
        _GM_ = GameObject.FindGameObjectWithTag("GM").GetComponent<GM>();
        _GM_.camShakeManager.CameraShake(cameraShake_force, cameraShake_duration, true);

        if(SFXs.Count != 0)
            GetComponent<AudioSource>().PlayOneShot(SFXs[Random.Range(0, SFXs.Count)]);
    }

    void FixedUpdate()
    {
        duration -= 1;
        lifeSpan -= 1;

        if(lifeSpan <= 0)
        {
            Destroy(gameObject);
        }

        if(duration <= 0)
        {
            GetComponent<PointEffector2D>().enabled = false;
        }
    }
}
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class FixedRotation : MonoBehaviour
{
    private Quaternion initRot;
    private Vector3 initScale;

    private bool rot_flag;
    // Start is called before the first frame update
    void Start()
    {
        transform.rotation = Quaternion.identity;
        initRot = transform.rotation;
        initScale = transform.localScale;
    }

    // Update is called once per frame
    void Update()
    {
        transform.rotation = initRot;
        if (transform.parent.localScale.x == -1 && !rot_flag)
        {
            transform.localScale = new Vector2(-transform.localScale.x, transform.localScale.y);
            rot_flag = true;
        }
        if(transform.parent.localScale.x == 1 && rot_flag)
        {
            transform.localScale = new Vector2(-transform.localScale.x, transform.localScale.y);
            rot_flag = false;
        }
    }
}
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class FixedScale : MonoBehaviour
{
    public Transform reference;
    private Vector3 lastRef;

    void Start()
    {
        lastRef = reference.localScale;
    }

    void Update()
    {
        if(reference.localScale.x != lastRef.x)
        {
            transform.localScale = new Vector3(transform.localScale.x * -1, transform.localScale.y, transform.localScale.z);
        }
        lastRef = reference.localScale;
    }
}
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class Flame : MonoBehaviour
{
    public float damage;
    public float duration;

    public GameObject victimEffect;

    // Start is called before the first frame update
    void Start()
    {
        
    }

    // Update is called once per frame
    void Update()
    {
        
    }

    private void OnTriggerEnter2D(Collider2D other)
    {
        if (other.CompareTag("Enemy/Hitbox"))
        {
            other.transform.parent.GetComponent<EnemyStats>().Burn(duration, damage, victimEffect);
            //Destroy(gameObject);
        }
    }
}
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class Follow : MonoBehaviour
{
    public Transform target;
    public Vector3 offset;
    // Start is called before the first frame update
    void Start()
    {
        transform.position = target.position + offset;
    }

    // Update is called once per frame
    void Update()
    {
        transform.position = target.position + offset;
        transform.rotation = target.rotation;
        transform.localScale = target.localScale;
    }
}
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using TMPro;

public class GM : MonoBehaviour
{
    public string ConfirmPW = "QWERTY";
    public bool usePW = true;

    public GameObject player;
    public CameraShakeManager camShakeManager;
    public Clock clock;
    public DataManager data;
    public int killCount;

    public bool paused;
    public bool useDeathConfirm;

    public bool playerAlive;
    public bool shooting_active;
    public List<bool> shooting_active_switches;
    public List<string> shooting_active_keys;

    public List<string> chunkParticles_names;
    public List<GameObject> chunkParticles;

    public List<Item> itemsList;
    public List<Module> modulesList;
    //public static List<Module> modulesList;
    //public static List<GameObject> weaponsList;
    //public static List<GameObject> deployablesList;

    // Start is called before the first frame update
    void Awake()
    {
        camShakeManager = GetComponent<CameraShakeManager>();
        clock = GetComponent<Clock>();
        data = GetComponent<DataManager>();
    }

    // Update is called once per frame
    void Update()
    {
        bool shooting_active_flag = true;
        for(int i = 0; i < shooting_active_keys.Count; i++)
        {
            if (shooting_active_switches[i] == false)
                shooting_active_flag = false;
        }
        if (!shooting_active_flag)
            shooting_active = false;
        else
            shooting_active = true;
    }

    public static GM GetGM()
    {
        GM _GM_ = GameObject.FindGameObjectWithTag("GM").GetComponent<GM>();
        return (_GM_);
    }

    public static GameObject GetPlayer()
    {
        GM _GM_ = GameObject.FindGameObjectWithTag("GM").GetComponent<GM>();
        return (_GM_.player);
    }

    public static GameObject GetUI()
    {
        return (GameObject.FindGameObjectWithTag("UI"));
    }

    public void AddShootingActiveSwitch(string key)
    {
        shooting_active_keys.Add(key);
        shooting_active_switches.Add(true);
    }

    public static float GetFloat(string stringValue, float defaultValue)
    {
        float result = defaultValue;
        float.TryParse(stringValue, out result);
        return result;
    }

    public static int CompareDistance(Vector2 origin, Vector2 target, float sampleDistance)
    {
        Vector2 diff = new Vector2((target.x - origin.x), (target.y - origin.y));
        if (diff.x * diff.x + diff.y * diff.y > sampleDistance * sampleDistance)
        {
            return (1);
        }
        else if (diff.x * diff.x + diff.y * diff.y == sampleDistance * sampleDistance)
        {
            return (0);
        }
        else
        {
            return (-1);
        }
    }

    public static void DisplayText(string text, bool clear)
    {
        TextMeshProUGUI displayText = GetUI().GetComponent<UI_HelpText>().helpText;

        if (clear)
        {
            displayText.text = string.Empty;
            GetUI().GetComponent<UI_HelpText>().line = 0;
        }

        GetUI().GetComponent<UI_HelpText>().DisplayText(text);
    }

    public static void DisplayText2(string text, bool clear)
    {
        TextMeshProUGUI displayText = GameObject.FindGameObjectWithTag("HelpText_2").GetComponent<TextMeshProUGUI>();

        if (clear)
        {
            displayText.text = string.Empty;
            GameObject.FindGameObjectWithTag("Player").GetComponent<UI_HelpText_2>().line = 0;
        }

        GameObject.FindGameObjectWithTag("Player").GetComponent<UI_HelpText_2>().fadeTime_timer = GameObject.FindGameObjectWithTag("Player").GetComponent<UI_HelpText_2>().fadeTime;
        if (text == string.Empty)
            GameObject.FindGameObjectWithTag("Player").GetComponent<UI_HelpText_2>().fadeTime_timer = 0;

        GameObject.FindGameObjectWithTag("Player").GetComponent<UI_HelpText_2>().DisplayText(text);
    }
}
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class GRND_C4 : MonoBehaviour
{
    public GameObject explosion;
    public GameObject fire;
    public GameObject fragment;

    public float delay;
    public float throwForce;

    public int fragmentCount;
    public float fragPositionOffset;
    public float fragLifeTime;

    public int fireCount;
    public float firePositionOffset;
    public float fireLifeTime;
    public float burnDuration;
    public float fireDamage;

    public LayerMask whatIsGround;
    public float damage;
    public float damageRange;
    
    public float explosionForce;
    public float explosionRange;

    // Start is called before the first frame update
    void Start()
    {
        GetComponent<AudioSource>().Play();
        GetComponent<Rigidbody2D>().velocity = transform.right * throwForce;
    }

    // Update is called once per frame
    void Update()
    {
        delay -= Time.deltaTime;
        if (delay <= 0)
            Explode();

    }

    public void Explode()
    {
        for (int i = 0; i < fragmentCount; i++)
        {
            Vector2 spawnPos = new Vector2(transform.position.x + Random.Range(-fragPositionOffset, fragPositionOffset), transform.position.y + Random.Range(-fragPositionOffset, fragPositionOffset));
            GameObject frag = fragment;
            frag.GetComponent<GRND_Fragment>().damage = damage;
            frag.GetComponent<GRND_Fragment>().life = fragLifeTime;
            Instantiate(frag, spawnPos, Quaternion.identity);
        }

        Collider2D[] col = Physics2D.OverlapCircleAll(transform.position, damageRange);

        foreach (Collider2D target in col)
        {
            if (target.GetComponent<EnemyStats>() != null)
            {
                RaycastHit2D wallInSight = Physics2D.Raycast(transform.position, target.transform.position - transform.position, Vector2.Distance(transform.position, target.transform.position), whatIsGround);
                if (wallInSight.collider == null)
                {
                    target.GetComponent<EnemyStats>().TakeDamage(damage);
                }
            }
            if (target.GetComponent<PlayerStats>() != null)
            {
                RaycastHit2D wallInSight = Physics2D.Raycast(transform.position, target.transform.position - transform.position, Vector2.Distance(transform.position, target.transform.position), whatIsGround);
                if (wallInSight.collider == null)
                {
                    target.GetComponent<PlayerStats>().TakeDamage(damage);
                }
            }
        }

        for (int i = 0; i < fireCount; i++)
        {
            Vector2 spawnPos = new Vector2(transform.position.x + Random.Range(-firePositionOffset, firePositionOffset), transform.position.y + Random.Range(-firePositionOffset, firePositionOffset));
            GameObject thisFire = fire;
            thisFire.GetComponent<Flame>().damage = fireDamage;
            thisFire.GetComponent<Flame>().duration = burnDuration;
            thisFire.GetComponent<Decay>().lifeSpan = fireLifeTime;
            Instantiate(fire, spawnPos, Quaternion.identity);
        }

        explosion.GetComponent<PointEffector2D>().forceMagnitude = explosionForce;
        explosion.GetComponent<CircleCollider2D>().radius = explosionRange;
        Instantiate(explosion, transform.position, transform.rotation);
        Destroy(gameObject);
    }
}
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class GRND_EMP : MonoBehaviour
{
    public float throwForce;
    public float delay;
    public float shockDamage;
    public float shockDuration;
    public float remainDuration;
    public float shockRange;
    public float shockEffect;

    public bool on;

    public GameObject victimEffects;
    public Sprite explosionSprite;
    private Collider2D[] victims;

    // Start is called before the first frame update
    void Start()
    {
        GetComponent<Rigidbody2D>().velocity = transform.right * throwForce;
    }

    // Update is called once per frame
    void Update()
    {
        delay -= Time.deltaTime;

        //Debug.Log(delay);

        if (delay <= 0)
        {
            if (!on)
                GetComponent<AudioSource>().Play();
            Explode();

            GetComponent<SpriteRenderer>().sprite = explosionSprite;
        }
    }

    public void Explode()
    {
        on = true;
        Collider2D[] col = Physics2D.OverlapCircleAll(transform.position, shockRange);

        victims = col;
        remainDuration -= Time.deltaTime;

        if(remainDuration > 0)
        {
            foreach (Collider2D victim in victims)
            {
                if (victim.GetComponent<EnemyStats>() != null)
                {
                    victim.GetComponent<EnemyStats>().Stunned(shockEffect, shockDuration, shockDamage, victimEffects);
                    victim.GetComponent<EnemyStats>().TakeDamage(shockDamage);
                }
            }
        }
        else
            Destroy(gameObject);

        /*
        on = true;
        shockDuration -= Time.deltaTime;
        if(shockDuration > 0)
        {
            Collider2D[] col = Physics2D.OverlapCircleAll(transform.position, shockRange);

            victims = col;

            foreach(Collider2D victim in victims)
            {
                if(victim.GetComponent<EnemyStats>() != null)
                {
                    victim.GetComponent<EnemyStats>().Stunned(true, shockEffect, victimEffects);
                    victim.GetComponent<EnemyStats>().TakeDamage(shockDamage);
                }
            }
        }

        else
        {
            foreach (Collider2D victim in victims)
            {
                if (victim.GetComponent<EnemyStats>() != null)
                {
                    victim.GetComponent<EnemyStats>().Stunned(false, shockEffect, victimEffects);
                }
            }

            Destroy(gameObject);
        }
        */
    }
}
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class GRND_Frag : MonoBehaviour
{
    public GameObject explosion;
    public GameObject fragment;
    public LayerMask whatIsGround;

    public float throwForce;
    public float explosionForce;
    public float delay;
    public float fragDamage;
    public float damage;
    public float damageRange;
    public int fragmentCount;
    public float fragPositionOffset;
    public float fragLifeTime;
    

    // Start is called before the first frame update
    void Start()
    {
        GetComponent<Rigidbody2D>().velocity = transform.right * throwForce;
    }

    // Update is called once per frame
    void Update()
    {
        delay -= Time.deltaTime;

        //Debug.Log(delay);

        if(delay <= 0)
        {
            Explode();
        }
    }

    public void Explode()
    {
        for(int i = 0; i < fragmentCount; i++)
        {
            Vector2 spawnPos = new Vector2(transform.position.x + Random.Range(-fragPositionOffset, fragPositionOffset), transform.position.y + Random.Range(-fragPositionOffset, fragPositionOffset));
            GameObject frag = fragment;
            frag.GetComponent<GRND_Fragment>().damage = fragDamage;
            frag.GetComponent<GRND_Fragment>().life = fragLifeTime;
            Instantiate(frag, spawnPos, Quaternion.identity);
        }
        explosion.GetComponent<PointEffector2D>().forceMagnitude = explosionForce;
        Instantiate(explosion, transform.position, transform.rotation);

        Collider2D[] col = Physics2D.OverlapCircleAll(transform.position, damageRange);

        foreach (Collider2D target in col)
        {
            if (target.GetComponent<EnemyStats>() != null)
            {
                RaycastHit2D wallInSight = Physics2D.Raycast(transform.position, target.transform.position - transform.position, Vector2.Distance(transform.position, target.transform.position), whatIsGround);
                if (wallInSight.collider == null)
                {
                    target.GetComponent<EnemyStats>().TakeDamage(damage);
                }
            }

            if (target.GetComponent<PlayerStats>() != null)
            {
                RaycastHit2D wallInSight = Physics2D.Raycast(transform.position, target.transform.position - transform.position, Vector2.Distance(transform.position, target.transform.position), whatIsGround);
                if (wallInSight.collider == null)
                {
                    target.GetComponent<PlayerStats>().TakeDamage(damage);
                }
            }
        }

        Destroy(gameObject);

    }
}
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class GRND_HomingMine : MonoBehaviour
{
    private Rigidbody2D rb;

    public LayerMask whatIsGround;

    public float throwForce;
    public float explosionForce;
    public float damage;

    public float detectionRange;
    public float chaseSpeed;
    public float rotationSpeed;

    public float explosionDistance;
    public float damageRange;

    public Sprite chaseSprite;
    private Sprite defaultSprite;

    private GameObject prey;

    // Start is called before the first frame update
    void Start()
    {
        defaultSprite = GetComponent<SpriteRenderer>().sprite;
        rb = GetComponent<Rigidbody2D>();
        rb.velocity = transform.right * throwForce;
        
    }

    // Update is called once per frame
    void Update()
    {
        Collider2D[] col = Physics2D.OverlapCircleAll(transform.position, detectionRange);
        GameObject closestEnemy = null;
        float closestDistance = Mathf.Infinity;

        foreach(Collider2D target in col)
        {
            if(target.tag.Contains("Enemy"))
            {
                GetComponent<SpriteRenderer>().sprite = chaseSprite;
                RaycastHit2D wallInSight = Physics2D.Raycast(transform.position, target.transform.position - transform.position, Vector2.Distance(transform.position, target.transform.position), whatIsGround);
                if (wallInSight.collider == null)
                {
                    if (closestDistance > Vector2.Distance(transform.position, target.transform.position))
                    {
                        closestEnemy = target.gameObject;
                        closestDistance = Vector2.Distance(transform.position, target.transform.position);
                    }
                }
            }
        }

        if(closestEnemy != null)
        {
            GetComponent<SpriteRenderer>().sprite = chaseSprite;
            if (prey == null)
            {
                prey = closestEnemy;
                transform.rotation = Quaternion.identity;
            }

            Chase(prey);
        }
        else
            GetComponent<SpriteRenderer>().sprite = defaultSprite;
    }

    void Chase(GameObject prey)
    {
        Vector3 targ = prey.transform.position;
        targ.z = 0f;

        Vector2 objectPos = transform.position;
        targ.x = targ.x - objectPos.x;
        targ.y = targ.y - objectPos.y;

        float angle = Mathf.Atan2(targ.y, targ.x) * Mathf.Rad2Deg;
        transform.rotation = Quaternion.Lerp(transform.rotation, Quaternion.Euler(new Vector3(0, 0, angle - 90)), rotationSpeed);

        rb.MovePosition(Vector2.MoveTowards(transform.position, prey.transform.position, chaseSpeed * Time.deltaTime));

        if(Vector2.Distance(transform.position, prey.transform.position) <= explosionDistance)
        {
            Explode();
        }
    }

    void Explode()
    {
        Collider2D[] col = Physics2D.OverlapCircleAll(transform.position, damageRange);

        foreach (Collider2D target in col)
        {
            if (target.GetComponent<EnemyStats>() != null)
            {
                RaycastHit2D wallInSight = Physics2D.Raycast(transform.position, target.transform.position - transform.position, Vector2.Distance(transform.position, target.transform.position), whatIsGround);
                if (wallInSight.collider == null)
                {
                    target.GetComponent<EnemyStats>().TakeDamage(damage);
                }
            }
        }

        Destroy(gameObject);
    }
}
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class GRND_HomingMineEMP : MonoBehaviour
{
    private Rigidbody2D rb;

    public LayerMask whatIsGround;

    public float throwForce;
    public float shockDamage;

    public float detectionRange;
    public float chaseSpeed;
    public float rotationSpeed;

    public float triggerDistance;
    public float shockRange;

    public Sprite chaseSprite;
    private Sprite defaultSprite;

    private GameObject prey;
    private Collider2D[] preys;

    public float shockRandomizer;
    public float shockDuration;
    public float remainDuration;
    public GameObject victimEffect;

    // Start is called before the first frame update
    void Start()
    {
        defaultSprite = GetComponent<SpriteRenderer>().sprite;
        rb = GetComponent<Rigidbody2D>();
        rb.velocity = transform.right * throwForce;
        
    }

    // Update is called once per frame
    void Update()
    {
        Collider2D[] col = Physics2D.OverlapCircleAll(transform.position, detectionRange);
        GameObject closestEnemy = null;
        float closestDistance = Mathf.Infinity;

        foreach(Collider2D target in col)
        {
            if (target.tag.Contains("Enemy"))
            {
                GetComponent<SpriteRenderer>().sprite = chaseSprite;
                RaycastHit2D wallInSight = Physics2D.Raycast(transform.position, target.transform.position - transform.position, Vector2.Distance(transform.position, target.transform.position), whatIsGround);
                if (wallInSight.collider == null)
                {
                    if (closestDistance > Vector2.Distance(transform.position, target.transform.position))
                    {
                        closestEnemy = target.gameObject;
                        closestDistance = Vector2.Distance(transform.position, target.transform.position);
                    }
                }
            }
        }

        if(closestEnemy != null)
        {
            GetComponent<SpriteRenderer>().sprite = chaseSprite;
            if (prey == null)
            {
                prey = closestEnemy;
                transform.rotation = Quaternion.identity;
            }

            Chase(prey);
        }
        else
            GetComponent<SpriteRenderer>().sprite = defaultSprite;
    }

    void Chase(GameObject prey)
    {
        Vector3 targ = prey.transform.position;
        targ.z = 0f;

        Vector2 objectPos = transform.position;
        targ.x = targ.x - objectPos.x;
        targ.y = targ.y - objectPos.y;

        float angle = Mathf.Atan2(targ.y, targ.x) * Mathf.Rad2Deg;
        transform.rotation = Quaternion.Lerp(transform.rotation, Quaternion.Euler(new Vector3(0, 0, angle - 90)), rotationSpeed);

        rb.MovePosition(Vector2.MoveTowards(transform.position, prey.transform.position, chaseSpeed * Time.deltaTime));

        if(Vector2.Distance(transform.position, prey.transform.position) <= triggerDistance)
        {
            Explode();
        }
    }

    void Explode()
    {
        if (preys == null)
            GetComponent<AudioSource>().Play();

        Collider2D[] col = Physics2D.OverlapCircleAll(transform.position, shockRange);

        preys = col;

        foreach (Collider2D target in preys)
        {
            if (target.GetComponent<EnemyStats>() != null)
            {
                target.GetComponent<EnemyStats>().Stunned(shockRandomizer, shockDuration, shockDamage, victimEffect);
            }
        }
        remainDuration -= Time.deltaTime;
        if(remainDuration <= 0)
            Destroy(gameObject);
        /*
        shockDuration -= Time.deltaTime;
        if(shockDuration <= 0)
        {
            foreach (Collider2D target in preys)
            {
                if (target.GetComponent<EnemyStats>() != null)
                {
                    target.GetComponent<EnemyStats>().Stunned(false, shockRandomizer, victimEffect);
                }
            }
            Destroy(gameObject);
        }
        */
    }
}
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class GRND_Incendiary : MonoBehaviour
{
    public GameObject explosion;
    public AudioClip explosionSFX;
    public GameObject fire;
    public float throwForce;
    public float explosionForce;
    public float delay;
    public float damage;
    public int fireCount;
    public float firePositionOffset;
    public float fireLifeTime;
    public float burnDuration;


    // Start is called before the first frame update
    void Start()
    {
        GetComponent<Rigidbody2D>().velocity = transform.right * throwForce;
    }

    // Update is called once per frame
    void Update()
    {
        delay -= Time.deltaTime;

        //Debug.Log(delay);

        if (delay <= 0)
        {
            Explode();
        }
    }

    public void Explode()
    {
        for (int i = 0; i < fireCount; i++)
        {
            Vector2 spawnPos = new Vector2(transform.position.x + Random.Range(-firePositionOffset, firePositionOffset), transform.position.y + Random.Range(-firePositionOffset, firePositionOffset));
            GameObject thisFire = fire;
            thisFire.GetComponent<Flame>().damage = damage;
            thisFire.GetComponent<Flame>().duration = burnDuration;
            thisFire.GetComponent<Decay>().lifeSpan = fireLifeTime;
            Instantiate(fire, spawnPos, Quaternion.identity);
        }
        explosion = Instantiate(explosion, transform.position, transform.rotation);
        explosion.GetComponent<PointEffector2D>().forceMagnitude = explosionForce;
        explosion.GetComponent<Explosion>().SFXs = new List<AudioClip>();
        explosion.GetComponent<Explosion>().SFXs.Add(explosionSFX);
        Destroy(gameObject);
    }
}
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class GRND_Puncture : MonoBehaviour
{
    public GameObject explosion;
    public GameObject fragment;
    public Transform[] spawnPoss;
    public float throwForce;
    public float explosionForce;
    public float delay;
    public float damage;
    public int fragmentCountEach;
    public float fragPositionOffset;
    public float fragLifeTime;
    public bool fragRicochet;

    // Start is called before the first frame update
    void Start()
    {
        GetComponent<Rigidbody2D>().velocity = transform.right * throwForce;
    }

    // Update is called once per frame
    void Update()
    {
        delay -= Time.deltaTime;

        //Debug.Log(delay);

        if (delay <= 0)
        {
            Explode();
        }
    }

    public void Explode()
    {
        for(int j = 0; j < spawnPoss.Length; j++)
        {
            for (int i = 0; i < fragmentCountEach; i++)
            {
                Vector2 spawnPos = new Vector2(spawnPoss[j].position.x + Random.Range(-fragPositionOffset, fragPositionOffset), spawnPoss[j].position.y + Random.Range(-fragPositionOffset, fragPositionOffset));
                GameObject frag = fragment;
                frag.GetComponent<GRND_Fragment>().damage = damage;
                frag.GetComponent<GRND_Fragment>().life = fragLifeTime;
                frag.GetComponent<GRND_Fragment>().ricochet = fragRicochet;
                Instantiate(frag, spawnPos, Quaternion.identity);
            }
        }
        
        explosion.GetComponent<PointEffector2D>().forceMagnitude = explosionForce;
        Instantiate(explosion, transform.position, transform.rotation);
        Destroy(gameObject);
    }
}
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class GroundStats : MonoBehaviour
{
    [Header("Collision particle type")]
    public string particle;

}
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class Gun_Rifle : MonoBehaviour
{
    /// <summary>
    /// 실제 총알을 발사하는 무기 스크립트
    /// -AR, SR 담당
    /// -데미지, 정확도, 연사 속도, 재장전 속도, 탄창 크기 등
    /// -WeaponStats 에 필요한 정보 가지고 있음
    /// </summary>
    private GM _GM_;
    private GameObject player;
    private WeaponStats ws;

    public bool useAim, autoReload;

    public AudioClip shotSFX;
    public AudioClip reloadSFX;
    public AudioSource audioSource;

    public Bullet bullet;
    public GameObject barrelEnd;
    public float bulletSpeed;
    public float fireRate;
    public float accuracy;
    public float damage;
    public int magSize;
    public float reloadSpeed;

    public bool spawnBulletShell;
    public GameObject bulletShell;
    public Transform bulletShellSpawnPoint;
    public float bs_RAO;
    public float bs_MS;
    public float bs_RS;

    [HideInInspector]
    public float fire_Timer, reload_Timer;

    [HideInInspector]
    public int ammo;

    [HideInInspector]
    public bool reloading;

    public float camShake_force;
    public float camShake_duration;

    List<int> ammoCount;
    List<string> ammoType;
    private int availableAmmo;
    // Start is called before the first frame update
    void Start()
    {
        _GM_ = GameObject.FindGameObjectWithTag("GM").GetComponent<GM>();
        player = _GM_.player;
        ws = transform.parent.GetComponent<WeaponStats>();
        ammo = magSize;
        ws.magSize = magSize;
    }

    // Update is called once per frame
    void Update()
    {
        if (_GM_.shooting_active)
            ACTIVE();
    }

    void ACTIVE()
    {
        ammoCount = player.GetComponent<PlayerWeaponManager>().ammo_count;
        ammoType = player.GetComponent<PlayerWeaponManager>().ammo_type;

        availableAmmo = ammoCount[ammoType.IndexOf(ws.ammoType)];

        ////////////////////////    Active when ammo > 0

        if (availableAmmo > 0)
        {
            switch (ws.category)
            {
                case "AR":
                    AR();
                    break;
                case "SR":
                    SR();
                    break;
                case "MG":
                    AR();
                    break;
                default:
                    Debug.Log("ERR: Unknown wsapon category (" + ws.category + "). Using AR function instead");
                    break;
            }

            if (reloading == true)
                Reload();
            else
            {
                fire_Timer += Time.deltaTime;

                if ((Input.GetKeyDown("r") || autoReload == true && ammo <= 0 && reloading == false) && ammo < magSize)
                {
                    GM.DisplayText2("RELOADING. . .", true);
                    audioSource.PlayOneShot(reloadSFX);
                    reloading = true;
                }

            }
        }
        else
            ws.is_shooting = false;
        ////////////////////////

        if (useAim == true)
        {
            if (Input.GetMouseButton(1))
                ws.is_aiming = true;
            else
                ws.is_aiming = false;
        }

        ws.ammoCount = ammo;
    }

    void Fire()
    {
        //Debug.Log("FIRED");
        Bullet thisBullet = bullet;
        thisBullet.damage = damage;
        thisBullet.accuracy = accuracy;
        thisBullet.speed = bulletSpeed;
        thisBullet.wielder = player.GetComponent<Gun_Rotation>().pivot.gameObject;

        
        if (player.transform.localScale.x == -1)
        {
            Quaternion scaler = thisBullet.transform.localRotation;
            scaler.y = 180;
            thisBullet.transform.localRotation = scaler;
        }
        if (player.transform.localScale.x == 1)
        {
            Quaternion scaler = thisBullet.transform.localRotation;
            scaler.y = 0;
            thisBullet.transform.localRotation = scaler;
        }
        

        Vector3 mousePos = Input.mousePosition;
        mousePos.z = 5.23f;

        Vector3 objectPos = Camera.main.WorldToScreenPoint(barrelEnd.transform.position);
        mousePos.x = mousePos.x - objectPos.x;
        mousePos.y = mousePos.y - objectPos.y;

        float angle = Mathf.Atan2(mousePos.y, mousePos.x) * Mathf.Rad2Deg;
        thisBullet.transform.rotation = Quaternion.Euler(new Vector3(0, thisBullet.transform.rotation.y, angle));

        Instantiate(thisBullet, barrelEnd.transform.position, thisBullet.transform.localRotation);

        audioSource.PlayOneShot(shotSFX);

        _GM_.camShakeManager.CameraShake(camShake_force, camShake_duration, false);

        //  Update ammo count
        player.GetComponent<PlayerWeaponManager>().ammo_count[ammoType.IndexOf(ws.ammoType)] -= 1;

        if (spawnBulletShell) { SpawnBulletShell(); }
    }

    void Reload()
    {
        ws.is_reloading = true;
        ws.is_shooting = false;
        reload_Timer += Time.deltaTime;
        if (reload_Timer >= reloadSpeed)
        {
            GM.DisplayText2(string.Empty, true);
            ammo = magSize;
            reload_Timer = 0;
            reloading = false;
            ws.is_reloading = false;
        }
    }

    public void SpawnBulletShell()
    {
        GameObject thisBulletShell = bulletShell;
        BulletShell script = thisBulletShell.GetComponent<BulletShell>();

        script.wielder = player;
        script.randomAngleOffset = bs_RAO;
        script.minSpeed = bs_MS;
        script.randomSpeed = bs_RS;

        Instantiate(thisBulletShell, bulletShellSpawnPoint.transform.position, Quaternion.identity);
    }

    void AR()
    {
        if (Input.GetMouseButton(0) && ammo > 0)
        {
            if (fire_Timer >= fireRate)
            {
                Fire();
                fire_Timer = 0;
                ammo -= 1;
            }
            ws.is_shooting = true;
        }
        else
        {
            ws.is_shooting = false;
        }
    }

    void SR()
    {
        if (Input.GetMouseButtonDown(0) && ammo > 0)
        {
            if (fire_Timer >= fireRate)
            {
                Fire();
                ws.Shoot();
                fire_Timer = 0;
                ammo -= 1;
            }
            ws.is_shooting = true;
        }
        else
        {
            ws.is_shooting = false;
        }
    }
}
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class Gun_Rotation : MonoBehaviour
{
    public Transform pivot;
    public Transform gun;
    public float rotSpeed;

    public GameObject IKs;
    public Transform IK_L;
    public Transform IK_R;

    public Transform L_Hand;
    public Transform R_Hand;

    private bool flip_flag;

    void Update()
    {
        if (!GM.GetGM().paused)
        {
            if (GetComponent<PlayerWeaponManager>().activeWeapon != null)
            {
                Arm();
                IKs.transform.position = GetComponent<PlayerWeaponManager>().activeWeapon.transform.position;
                //IKs.transform.parent = GetComponent<PlayerWeaponManager>().activeWeapon.transform;
                //IK_L.transform.position = GetComponent<PlayerWeaponManager>().activeWeapon.GetComponent<WeaponStats>().IK_L.position;
                //IK_R.transform.position = GetComponent<PlayerWeaponManager>().activeWeapon.GetComponent<WeaponStats>().IK_R.position;
            }
            else
            {
                Disarm();
                IKs.transform.position = new Vector3(0, 0, 0);
            }
            //IK_L.transform.position = new Vector3(0, 0, 0);

            if (transform.localScale.x == -1)
            {
                Vector3 scaler = pivot.transform.localScale;
                scaler.x = -1;
                pivot.transform.localScale = scaler;

                Quaternion rotator = L_Hand.localRotation;
                rotator.y = 180;
                rotator.x = 180;
                rotator.z = IK_L.rotation.z;
                L_Hand.localRotation = rotator;
                rotator = R_Hand.localRotation;
                rotator.y = 180;
                rotator.x = 180;
                rotator.z = IK_R.rotation.z;
                R_Hand.localRotation = rotator;

            }
            if (transform.localScale.x == 1)
            {
                Vector3 scaler = pivot.transform.localScale;
                scaler.x = 1;
                pivot.transform.localScale = scaler;

                Quaternion rotator = L_Hand.localRotation;
                rotator.y = 0;
                rotator.x = 0;
                rotator.z = IK_L.rotation.z;
                L_Hand.localRotation = rotator;
                rotator = R_Hand.localRotation;
                rotator.y = 0;
                rotator.x = 0;
                rotator.z = IK_R.rotation.z;
                R_Hand.localRotation = rotator;

            }

            Vector3 mousePos = Input.mousePosition;
            mousePos = Camera.main.ScreenToWorldPoint(mousePos);

            if (mousePos.x >= Camera.main.transform.position.x)
            {
                Vector3 scaler = pivot.transform.localScale;
                scaler.y = 1;
                pivot.transform.localScale = scaler;
            }
            if (mousePos.x < Camera.main.transform.position.x)
            {
                Vector3 scaler = pivot.transform.localScale;
                scaler.y = -1;
                pivot.transform.localScale = scaler;
            }

            mousePos = Input.mousePosition;
            mousePos.z = 5.23f;

            Vector3 objectPos = Camera.main.WorldToScreenPoint(pivot.position);
            mousePos.x = mousePos.x - objectPos.x;
            mousePos.y = mousePos.y - objectPos.y;

            float angle = Mathf.Atan2(mousePos.y, mousePos.x) * Mathf.Rad2Deg;
            pivot.rotation = Quaternion.Lerp(pivot.rotation, Quaternion.Euler(new Vector3(0, 0, angle)), rotSpeed * Time.deltaTime);
        } 
    }

    public void Arm()
    {
        IKs.SetActive(true);
    }
    public void Disarm()
    {
        IKs.SetActive(false);
    }
}
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class Gun_SG : MonoBehaviour
{
    /// <summary>
    /// 실제 총알을 발사하는 무기 스크립트
    /// -AR, SR 담당
    /// -데미지, 정확도, 연사 속도, 재장전 속도, 탄창 크기 등
    /// -WeaponStats 에 필요한 정보 가지고 있음
    /// </summary>
    private GM _GM_;
    private GameObject player;
    public WeaponStats ws;

    public bool useAim, autoReload;

    public AudioClip shotSFX;
    public AudioClip reloadSFX;
    public AudioSource audioSource;

    public Bullet bullet;
    public int maxPelletCount;
    public int minPelletCount;
    public GameObject barrelEnd;
    public float bulletSpeed;
    public float fireRate;
    public float accuracy;
    public float damagePerPellet;
    public int magSize;
    public float reloadSpeed;

    public bool autoSpawnBulletShell;
    public GameObject bulletShell;
    public Transform bulletShellSpawnPoint;
    public float bs_RAO;
    public float bs_MS;
    public float bs_RS;

    [HideInInspector]
    public float fire_Timer, reload_Timer;

    [HideInInspector]
    public int ammo;

    [HideInInspector]
    public bool reloading;

    public float camShake_force;
    public float camShake_duration;

    List<int> ammoCount;
    List<string> ammoType;
    private int availableAmmo;

    // Start is called before the first frame update
    void Start()
    {
        _GM_ = GameObject.FindGameObjectWithTag("GM").GetComponent<GM>();
        player = _GM_.player;
        ammo = magSize;
        ws.magSize = magSize;
    }

    // Update is called once per frame
    void Update()
    {
        if (_GM_.shooting_active)
            ACTIVE();
    }

    void ACTIVE()
    {
        ammoCount = player.GetComponent<PlayerWeaponManager>().ammo_count;
        ammoType = player.GetComponent<PlayerWeaponManager>().ammo_type;

        availableAmmo = ammoCount[ammoType.IndexOf(ws.ammoType)];

        if (availableAmmo > 0)
        {
            SG();

            if (reloading == true)
            {
                Reload();
            }
            else
            {
                fire_Timer += Time.deltaTime;

                if ((Input.GetKeyDown("r") || autoReload == true && ammo <= 0 && reloading == false) && ammo < magSize)
                {
                    GM.DisplayText2("RELOADING. . .", true);
                    audioSource.PlayOneShot(reloadSFX);
                    reloading = true;
                }
            }
        }

        if (useAim == true)
        {
            if (Input.GetMouseButton(1))
            {
                ws.is_aiming = true;
            }
            else
            {
                ws.is_aiming = false;
            }
        }

        ws.ammoCount = ammo;
    }

    void Fire()
    {
        int pelletCount = Random.Range(minPelletCount, maxPelletCount);
        
        for(int i = 0; i < pelletCount; i++)
        {
            Bullet thisBullet = bullet;
            thisBullet.damage = damagePerPellet;
            thisBullet.accuracy = accuracy;
            thisBullet.speed = bulletSpeed;
            thisBullet.wielder = player.GetComponent<Gun_Rotation>().pivot.gameObject;


            if (player.transform.localScale.x == -1)
            {
                Quaternion scaler = thisBullet.transform.localRotation;
                scaler.y = 180;
                thisBullet.transform.localRotation = scaler;
            }
            if (player.transform.localScale.x == 1)
            {
                Quaternion scaler = thisBullet.transform.localRotation;
                scaler.y = 0;
                thisBullet.transform.localRotation = scaler;
            }


            Vector3 mousePos = Input.mousePosition;
            mousePos.z = 5.23f;

            Vector3 objectPos = Camera.main.WorldToScreenPoint(barrelEnd.transform.position);
            mousePos.x = mousePos.x - objectPos.x;
            mousePos.y = mousePos.y - objectPos.y;

            float angle = Mathf.Atan2(mousePos.y, mousePos.x) * Mathf.Rad2Deg;
            thisBullet.transform.rotation = Quaternion.Euler(new Vector3(0, thisBullet.transform.rotation.y, angle));

            Instantiate(thisBullet, barrelEnd.transform.position, thisBullet.transform.localRotation);
        }

        audioSource.PlayOneShot(shotSFX);

        _GM_.camShakeManager.CameraShake(camShake_force, camShake_duration, false);

        ////////    Update ammo count
        player.GetComponent<PlayerWeaponManager>().ammo_count[ammoType.IndexOf(ws.ammoType)] -= 1;

        if (autoSpawnBulletShell) { SpawnBulletShell(); }
    }

    void Reload()
    {
        ws.is_reloading = true;
        ws.is_shooting = false;
        reload_Timer += Time.deltaTime;
        if (reload_Timer >= reloadSpeed)
        {
            GM.DisplayText2(string.Empty, true);
            ammo = magSize;
            reload_Timer = 0;
            reloading = false;
            ws.is_reloading = false;
        }
    }

    public void SpawnBulletShell()
    {
        GameObject thisBulletShell = bulletShell;
        BulletShell script = thisBulletShell.GetComponent<BulletShell>();

        script.wielder = player;
        script.randomAngleOffset = bs_RAO;
        script.minSpeed = bs_MS;
        script.randomSpeed = bs_RS;

        Instantiate(thisBulletShell, bulletShellSpawnPoint.transform.position, Quaternion.identity);
    }

    void SG()
    {
        if (Input.GetMouseButtonDown(0) && ammo > 0)
        {
            if (fire_Timer >= fireRate)
            {
                Fire();
                ws.Shoot();
                fire_Timer = 0;
                ammo -= 1;
            }
            ws.is_shooting = true;
        }
        else
        {
            ws.is_shooting = false;
        }
    }
}
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;

public class Intro : MonoBehaviour
{
    private GameObject player;
    private GM _GM_;

    public int stage = 1;

    public float _1_Movement_Delay;
    private float _1_Movement_Delay_init;
    public GameObject _1_Darken;
    private Color _1_Darken_Color;
    public GameObject _2_Sight_Module;
    public GameObject _2_Noise;
    public Crate _3_Crate;

    void Start()
    {
        _GM_ = GM.GetGM();
        player = GM.GetPlayer();

        _1_Movement_Delay_init = _1_Movement_Delay;
        _1_Darken_Color = _1_Darken.GetComponent<Image>().color;
    }

    void Update()
    {
        if (_1_Movement_Delay > 0)
        {
            _1_Movement_Delay -= Time.deltaTime;
            player.GetComponent<PlayerMove>().enabled = false;
            player.GetComponent<PlayerAnimControl>().enabled = false;

            _1_Darken.SetActive(true);
            Color col = _1_Darken.GetComponent<Image>().color;
            _1_Darken.GetComponent<Image>().color = new Color(col.r, col.g, col.b, _1_Movement_Delay / _1_Movement_Delay_init);
        }
        else
        {
            _1_Darken.SetActive(false);
            _1_Darken.GetComponent<Image>().color = _1_Darken_Color;
            player.GetComponent<PlayerMove>().enabled = true;
            player.GetComponent<PlayerAnimControl>().enabled = true;

            stage = 2;
        }

        try
        {
            Item_Module asd = _2_Sight_Module.GetComponent<Item_Module>();
            string addd = asd.name;
        }
        catch
        {
            _2_Noise.GetComponent<Animator>().SetBool("Gone", true);
            GM.DisplayText("Visual perception restored.", true);
            stage = 3;
        }


        if(_3_Crate.items.Count == 0)
        {
            Camera.main.gameObject.GetComponent<CameraMan>().speed = 1.5f;
            stage = 4;
        }
    }

    
}
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class Item_Module : MonoBehaviour
{
    public Module module;

    public void Access()
    {
        if (GameObject.FindGameObjectWithTag("Player").GetComponent<PlayerModuleManager>().InsertModule(module))
            Destroy(gameObject);
    }
}
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class ItemPickUp : MonoBehaviour
{
    [Header("WeaponStats, etc")]
    public string targetScript;
    public GameObject pressKey;

    private void Update()
    {
        if(GameObject.FindGameObjectWithTag("Player").GetComponent<PlayerPickUp>().selectedItem == gameObject)
        {
            if(!Input.GetKey("e"))
                pressKey.GetComponent<SpriteRenderer>().enabled = true;
        }
        else
        {
            pressKey.GetComponent<SpriteRenderer>().enabled = false;
        }
    }

    public void PickUp(Transform parent)
    {
        switch (targetScript)
        {
            case "WeaponStats":
                transform.parent.gameObject.GetComponent<WeaponStats>().PickUp(parent);
                break;
            case "Crate":
                transform.parent.GetComponent<Crate>().Access(true);
                break;
            case "Item_Module":
                transform.parent.GetComponent<Item_Module>().Access();
                break;
            default:
                Debug.Log("ERR: Unknown item target script (" + targetScript +")  [From " + gameObject.name + "]");
                break;
        }
    }
}
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using TMPro;

public class ItemSlot : MonoBehaviour
{
    public int NUM;
    public TextMeshProUGUI TYPE_ID;
    public TextMeshProUGUI COUNT;
}
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class LandMine : MonoBehaviour
{
    public bool explode;

    public LayerMask whatIsGround;
    public GameObject warning;

    public float fragDamage;
    public float damage;
    public float delay;
    public float damageRange;
    public GameObject fragment;
    public int fragmentCount;
    public float fragPositionOffset;
    public float fragLifeTime;
    public GameObject explosion;
    public float explosionForce;

    void Update()
    {
        if (explode)
            Explode();
    }

    private void OnTriggerEnter2D(Collider2D other)
    {
        if (other.CompareTag("Player") || other.CompareTag("Player/Hitbox"))
        {
            if (!explode)
            {
                GetComponent<AudioSource>().Play();
                warning.SetActive(true);
            }
            explode = true;
        }
    }

    public void Explode()
    {
        delay -= Time.deltaTime;
        if(delay <= 0)
        {
            for (int i = 0; i < fragmentCount; i++)
            {
                Vector2 spawnPos = new Vector2(transform.position.x + Random.Range(-fragPositionOffset, fragPositionOffset), transform.position.y + Random.Range(-fragPositionOffset, fragPositionOffset));
                GameObject frag = fragment;
                frag.GetComponent<GRND_Fragment>().damage = fragDamage;
                frag.GetComponent<GRND_Fragment>().life = fragLifeTime;
                Instantiate(frag, spawnPos, Quaternion.identity);
            }
            explosion.GetComponent<PointEffector2D>().forceMagnitude = explosionForce;
            Instantiate(explosion, transform.position, transform.rotation);

            Collider2D[] col = Physics2D.OverlapCircleAll(transform.position, damageRange);

            foreach (Collider2D target in col)
            {
                if (target.GetComponent<EnemyStats>() != null)
                {
                    RaycastHit2D wallInSight = Physics2D.Raycast(transform.position, target.transform.position - transform.position, Vector2.Distance(transform.position, target.transform.position), whatIsGround);
                    if (wallInSight.collider == null)
                    {
                        target.GetComponent<EnemyStats>().TakeDamage(damage);
                    }
                }

                if (target.GetComponent<PlayerStats>() != null)
                {
                    RaycastHit2D wallInSight = Physics2D.Raycast(transform.position, target.transform.position - transform.position, Vector2.Distance(transform.position, target.transform.position), whatIsGround);
                    if (wallInSight.collider == null)
                    {
                        target.GetComponent<PlayerStats>().TakeDamage(damage);
                    }
                }
            }

            Destroy(gameObject);
        }
    }
}
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.SceneManagement;

public class LevelManager : MonoBehaviour
{
    public int level;

    private void Update()
    {
        level = SceneManager.GetActiveScene().buildIndex;
    }


    public void LoadLevel(int index)
    {
        SceneManager.LoadScene(index);
    }

    public void LoadLevel(string name)
    {
        Debug.Log("asd");
        if (name == "Self")
            SceneManager.LoadScene(SceneManager.GetActiveScene().name);
        else
            SceneManager.LoadScene(name);
    }

    public void Quit()
    {
        Application.Quit();
    }
}
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class MasterWeaponManagement : MonoBehaviour
{
    public List<string> gunIndex;
}
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

[System.Serializable]
public class Module
{
    public string ID;
    public int level;
    public Sprite IMG;
    public string accessPanel_ID;
    [TextArea]
    public string description;

    public void Reset(Module module)
    {
        module.ID = string.Empty;
        module.level = 0;
        module.IMG = null;
        module.accessPanel_ID = string.Empty;
        module.description = string.Empty;
    }
}
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class Particle_Stats : MonoBehaviour
{
    [Header("Collision particle type")]
    public string particle;
}
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class Particles : MonoBehaviour
{
    public float lifeTime;

    // Update is called once per frame
    void Update()
    {
        lifeTime -= Time.deltaTime;
        if(lifeTime <= 0)
        {
            Destroy(gameObject);
        }
    }
}
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class PlayAudioOnCollision : MonoBehaviour
{
    public AudioClip[] sfxs;

    private void OnCollisionEnter2D(Collision2D collision)
    {
        if (collision.gameObject.CompareTag("Ground"))
            GetComponent<AudioSource>().PlayOneShot(sfxs[Random.Range(0, sfxs.Length - 1)]);
    }
}
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class PlayerAnimControl : MonoBehaviour
{
    /// <summary>
    /// 플레이어 애니메이션 담당
    /// -플레이어 움직임
    /// -플레이어와 해당 아이템 애니메이션 싱크로 맞춰 실제 플레이
    /// -PlayerMove 와 PlayerWeaponManager 등의 스크립트에서 명령하여 애니메이션 플레이
    /// </summary>

    private GM _GM_;

    private Animator anim;
    private Rigidbody2D rb;

    private PlayerMove pm;

    void Start()
    {
        _GM_ = GameObject.FindGameObjectWithTag("GM").GetComponent<GM>();
        anim = GetComponent<Animator>();
        rb = GetComponent<Rigidbody2D>();
        pm = GetComponent<PlayerMove>();
    }


    void Update()
    {
        if (pm.crouched)
        {
            anim.SetBool("Crouched", true);
        }
        else
        {
            anim.SetBool("Crouched", false);

            Move();

        }

        ///////////////////////// Jump Input    점프 인풋
        bool onGround;

        if (pm.onGround != null)
            onGround = true;
        else
            onGround = false;

        anim.SetBool("OnGround", onGround);
        anim.SetFloat("YVel", rb.velocity.y);
    }
    
    void Move()
    {
        if (pm.faceMouseMovement)
        {
            int moveInput_Int;

            if (Input.GetAxis("Horizontal") > 0)
                moveInput_Int = 1;
            else if (Input.GetAxis("Horizontal") < 0)
                moveInput_Int = -1;
            else
                moveInput_Int = 0;

            if(Input.GetAxisRaw("Horizontal") == 0)
            {
                anim.SetInteger("Speed", 0);
            }
            else if (transform.localScale.x != moveInput_Int && moveInput_Int != 0)
            {
                //anim.SetBool("MoonWalk", true);
                if (Input.GetKey("left shift"))
                    anim.SetInteger("Speed", -2);
                else
                    anim.SetInteger("Speed", -1);
                }
            else
            {
                //anim.SetBool("MoonWalk", false);
                if (Input.GetKey("left shift"))
                    anim.SetInteger("Speed", 2);
                else
                    anim.SetInteger("Speed", 1);
            }
        }
        else
        {
            //////////////////////////// Movement Input     좌 우 움직임 인풋
            if (Input.GetAxisRaw("Horizontal") != 0)
            {
                if (Input.GetKey("left shift"))
                    anim.SetInteger("Speed", 2);
                else
                    anim.SetInteger("Speed", 1);
            }
            else
                anim.SetInteger("Speed", 0);

        }
    }

    public void Jump()
    {
        anim.SetTrigger("Jump");
    }

    public void Shoot(GameObject gun, bool shoot, bool repeat)
    {
        if (repeat == true)
        {
            if(shoot == true && _GM_.shooting_active)
            {
                try
                {
                    gun.GetComponent<Animator>().SetBool("Shooting", true);
                }
                catch
                { }
                anim.SetBool("Shooting", true);
            }
            else
            {
                try
                {
                    gun.GetComponent<Animator>().SetBool("Shooting", false);
                }
                catch
                { }
                anim.SetBool("Shooting", false);
            }
        }
        else
        {
            try
            {
                gun.GetComponent<Animator>().SetTrigger("Shoot");
            }
            catch
            { }
            anim.SetTrigger("Shoot");
        }
    }

    public void Reload()
    {
        anim.SetTrigger("Reload");
    }

    public void Aim(bool aim)
    {
        if(aim == true)
            anim.SetBool("Aim", true);
        else
            anim.SetBool("Aim", false);
    }

}
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.Audio;

public class PlayerAudioManager : MonoBehaviour
{
    private AudioSource player_audio;

    [Header("Walking and running")]
    public AudioClip[] footsteps;

    [Header("Jumping and flying")]
    public AudioClip jump;
    public AudioClip land;
    public AudioClip jetpack_end;
    public AudioSource player_audio_jetpack;

    // Start is called before the first frame update
    void Start()
    {
        player_audio = GetComponent<AudioSource>();
    }

    // Update is called once per frame
    void Update()
    {
        
    }

    public void Step_SFX()
    {
        player_audio.PlayOneShot(footsteps[Random.Range(0, footsteps.Length)]);
    }

    public void Jump_SFX()
    {
        player_audio.PlayOneShot(jump);
    }

    public void Land_SFX()
    {
        player_audio.PlayOneShot(land);
    }

    public void Jetpack_SFX(bool play)
    {
        if (play)
        {
            //Debug.Log("PlayingJP SFX");
            player_audio_jetpack.Play();
        }
        else
        {
            player_audio.PlayOneShot(jetpack_end);
            player_audio_jetpack.Stop();
        } 
    }
}
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class PlayerModuleManager : MonoBehaviour
{
    public List<Module> modules;
    public List<string> modules_IDs;
    public GameObject item_module;
    public UI_ControlPanel2 controlPanel;

    void Start()
    {
        //RESET modules_IDs
        modules_IDs = new List<string>();

        foreach (Module module in modules)
        {
            modules_IDs.Add(module.ID);
        }
        controlPanel = GameObject.FindGameObjectWithTag("UI").GetComponent<UI_ControlPanel2>();
    }

    void Update()
    {
        
    }

    public bool InsertModule(Module module)
    {
        
        switch (module.ID)
        {
            case "JetpackFuelEfficiency":
                if (!M_JetpackFuelEfficiency(module))
                    return (false);
                break;
            case "MovementFuelEfficiency":
                if(!M_MovementFuelEfficiency(module))
                    return (false);
                break;
            case "FuelCapacity":
                if(!M_FuelCapacity(module))
                    return (false);
                break;
            case "Jetpack":
                //Debug.Log("FUCK");
                if (!M_Jetpack(module))
                    return (false);
                break;
            case "JetpackThermalInsulation":
                if (!M_JetpackThermalInsulation(module))
                    return (false);
                break;
            case "JetpackThrust":
                if (!M_JetpackThrust(module))
                    return (false);
                break;
            case "WeaponCapacity":
                if (!M_WeaponCapacity(module))
                    return (false);
                break;
            case "Deployables":
                if (!M_Deployables(module))
                    return (false);
                break;
            case "Shield":
                if (!M_Shield(module))
                    return (false);
                break;
        }
        GM.DisplayText("Module Inserted:" + module.ID, false);
        //GM.DisplayText2(module.description, false);
        controlPanel.AddModule(module);
        return (true);
    }

    public void UpdateModule(Module module, int state)
    {
        Debug.Log("s: 2: " + module.ID);
        switch (module.ID)
        {
            case "JetpackFuelEfficiency":
                M_JetpackFuelEfficiency(module, state);
                break;
            case "MovementFuelEfficiency":
                M_MovementFuelEfficiency(module, state);
                break;
            case "FuelCapacity":
                M_FuelCapacity(module, state);
                break;
            case "Jetpack":
                M_Jetpack(module, state);
                break;
            case "JetpackThermalInsulation":
                M_JetpackThermalInsulation(module, state);
                break;
            case "JetpackThrust":
                M_JetpackThrust(module, state);
                break;
            case "WeaponCapacity":
                M_WeaponCapacity(module, state);
                break;
            case "Deployables":
                M_Deployables(module, state);
                break;
            case "Shield":
                M_Shield(module, state);
                break;
        }
        
    }

    void SpawnModule(Module module)
    {
        GameObject thisItem = item_module;
        thisItem.GetComponent<Item_Module>().module = modules[modules_IDs.IndexOf(module.ID)];
        thisItem.GetComponent<SpriteRenderer>().sprite = modules[modules_IDs.IndexOf(module.ID)].IMG;
        Instantiate(thisItem, transform.position, transform.rotation);
        modules.Remove(modules[modules_IDs.IndexOf(module.ID)]);
        modules_IDs.Remove(modules_IDs[modules_IDs.IndexOf(module.ID)]);
    }

    void SpawnModule(Module module, bool direct)
    {
        GameObject thisItem = item_module;
        thisItem.GetComponent<Item_Module>().module = modules[modules.IndexOf(module)];
        thisItem.GetComponent<SpriteRenderer>().sprite = modules[modules.IndexOf(module)].IMG;
        Instantiate(thisItem, transform.position, transform.rotation);
        modules.Remove(modules[modules.IndexOf(module)]);
        modules_IDs.Remove(modules_IDs[modules.IndexOf(module)]);
    }

    //MODULE INSERTION FUNCTIONS
    //////////////////////////////////////////////

    bool M_JetpackFuelEfficiency(Module module)
    {
        if (!modules_IDs.Contains(module.ID) || modules[modules_IDs.IndexOf(module.ID)].level != module.level)
        {
            //SAME MODULE EXISTS WITH LOWER LEVEL
            if (modules_IDs.IndexOf(module.ID) != -1 && modules[modules_IDs.IndexOf(module.ID)].level != module.level)
            {
                SpawnModule(module);
            }

            //CHANGE STATS
            if (module.level == 1)
                GetComponent<PlayerMove>().jetpack_fuel_efficiency = 0.5f;
            if (module.level == 2)
                GetComponent<PlayerMove>().jetpack_fuel_efficiency = 0.9f;
            if (module.level == 3)
                GetComponent<PlayerMove>().jetpack_fuel_efficiency = 1.2f;

            modules.Add(module);
            modules_IDs.Add(module.ID);
            return (true);
        }
        else
        {
            Debug.Log("Module (" + module.ID + "_Level " + module.level + ") already exists");
            return (false);
        }
    }

    void M_JetpackFuelEfficiency(Module module, int state)
    {
        if (state == 0)
        {
            SpawnModule(module, true);
            GetComponent<PlayerMove>().jetpack_fuel_efficiency = 0f;
        }
        else if(state == 1)
        {
            GetComponent<PlayerMove>().jetpack_fuel_efficiency = 0f;
        }
        else
        {
            if (module.level == 1)
                GetComponent<PlayerMove>().jetpack_fuel_efficiency = 0.5f;
            if (module.level == 2)
                GetComponent<PlayerMove>().jetpack_fuel_efficiency = 0.9f;
            if (module.level == 3)
                GetComponent<PlayerMove>().jetpack_fuel_efficiency = 1.2f;
        }
    }

    //-----------------------------------------------------------------

    bool M_MovementFuelEfficiency(Module module)
    {
        if (!modules_IDs.Contains(module.ID) || modules[modules_IDs.IndexOf(module.ID)].level != module.level)
        {
            //SAME MODULE EXISTS WITH LOWER LEVEL
            if (modules_IDs.IndexOf(module.ID) != -1 && modules[modules_IDs.IndexOf(module.ID)].level != module.level)
            {
                SpawnModule(module);
            }

            //CHANGE STATS
            if (module.level == 1)
                GetComponent<PlayerMove>().move_fuel_efficiency = 35f;
            if (module.level == 2)
                GetComponent<PlayerMove>().move_fuel_efficiency = 45f;
            if (module.level == 3)
                GetComponent<PlayerMove>().move_fuel_efficiency = 55f;

            modules.Add(module);
            modules_IDs.Add(module.ID);
            return (true);
        }
        else
        {
            Debug.Log("Module (" + module.ID + "_Level " + module.level + ") already exists");
            return (false);
        }
    }

    void M_MovementFuelEfficiency(Module module, int state)
    {
        if (state == 0)
        {
            SpawnModule(module, true);
            GetComponent<PlayerMove>().move_fuel_efficiency = 0f; ;
        }
        else if (state == 1)
        {
            GetComponent<PlayerMove>().move_fuel_efficiency = 0f;
        }
        else
        {
            if (module.level == 1)
                GetComponent<PlayerMove>().move_fuel_efficiency = 35f;
            if (module.level == 2)
                GetComponent<PlayerMove>().move_fuel_efficiency = 45f;
            if (module.level == 3)
                GetComponent<PlayerMove>().move_fuel_efficiency = 55f;
        }
    }

    //-----------------------------------------------------------------

    bool M_FuelCapacity(Module module)
    {
        if (!modules_IDs.Contains(module.ID) || modules[modules_IDs.IndexOf(module.ID)].level != module.level)
        {
            //SAME MODULE EXISTS WITH LOWER LEVEL
            if (modules_IDs.IndexOf(module.ID) != -1 && modules[modules_IDs.IndexOf(module.ID)].level != module.level)
            {
                SpawnModule(module);
            }

            //CHANGE STATS
            if (module.level == 1)
                GetComponent<PlayerMove>().maxFuel = 1600;
            if (module.level == 2)
                GetComponent<PlayerMove>().maxFuel = 1850;
            if (module.level == 3)
                GetComponent<PlayerMove>().maxFuel = 2200;
            if (module.level == 4)
                GetComponent<PlayerMove>().maxFuel = 2500;
            if (module.level == 5)
                GetComponent<PlayerMove>().maxFuel = 2800;

            modules.Add(module);
            modules_IDs.Add(module.ID);
            return (true);
        }
        else
        {
            Debug.Log("Module (" + module.ID + "_Level " + module.level + ") already exists");
            return (false);
        }
    }

    void M_FuelCapacity(Module module, int state)
    {
        if (state == 0)
        {
            SpawnModule(module, true);
            GetComponent<PlayerMove>().maxFuel = 1200;
        }
        else if (state == 1)
        {
            GetComponent<PlayerMove>().maxFuel = 1200;
        }
        else
        {
            if (module.level == 1)
                GetComponent<PlayerMove>().maxFuel = 1600;
            if (module.level == 2)
                GetComponent<PlayerMove>().maxFuel = 1850;
            if (module.level == 3)
                GetComponent<PlayerMove>().maxFuel = 2200;
            if (module.level == 4)
                GetComponent<PlayerMove>().maxFuel = 2500;
            if (module.level == 5)
                GetComponent<PlayerMove>().maxFuel = 2800;
        }
    }

    //-----------------------------------------------------------------

    bool M_Jetpack(Module module)
    {
        if (!modules_IDs.Contains(module.ID))
        {
            //CHANGE STATS
            GetComponent<PlayerMove>().jetpack = true;
            modules.Add(module);
            modules_IDs.Add(module.ID);
            return (true);
        }
        else
        {
            Debug.Log("Module (" + module.ID + "_Level " + module.level + ") already exists");
            return (false);
        }
    }

    void M_Jetpack(Module module, int state)
    {
        if (state == 0)
        {
            SpawnModule(module, true);
            GetComponent<PlayerMove>().jetpack = false;
        }
        else if (state == 1)
        {
            GetComponent<PlayerMove>().jetpack = false;
        }
        else
        {
            GetComponent<PlayerMove>().jetpack = true;
        }
    }

    //-----------------------------------------------------------------

    bool M_JetpackThermalInsulation(Module module)
    {
        if (!modules_IDs.Contains(module.ID) || modules[modules_IDs.IndexOf(module.ID)].level != module.level)
        {
            //SAME MODULE EXISTS WITH LOWER LEVEL
            if (modules_IDs.IndexOf(module.ID) != -1 && modules[modules_IDs.IndexOf(module.ID)].level != module.level)
            {
                SpawnModule(module);
            }

            //CHANGE STATS
            if (module.level == 1)
                GetComponent<PlayerMove>().jetpack_overheat = 160f;
            if (module.level == 2)
                GetComponent<PlayerMove>().jetpack_overheat = 190f;
            if (module.level == 3)
                GetComponent<PlayerMove>().jetpack_overheat = 210f;

            modules.Add(module);
            modules_IDs.Add(module.ID);
            return (true);
        }
        else
        {
            Debug.Log("Module (" + module.ID + "_Level " + module.level + ") already exists");
            return (false);
        }
    }

    void M_JetpackThermalInsulation(Module module, int state)
    {
        if (state == 0)
        {
            SpawnModule(module, true);
            GetComponent<PlayerMove>().jetpack_overheat = 120f;
        }
        else if (state == 1)
        {
            GetComponent<PlayerMove>().jetpack_overheat = 120f;
        }
        else
        {
            if (module.level == 1)
                GetComponent<PlayerMove>().jetpack_overheat = 160f;
            if (module.level == 2)
                GetComponent<PlayerMove>().jetpack_overheat = 190f;
            if (module.level == 3)
                GetComponent<PlayerMove>().jetpack_overheat = 210f;
        }
    }


    //-----------------------------------------------------------------


    bool M_JetpackThrust(Module module)
    {
        if (!modules_IDs.Contains(module.ID) || modules[modules_IDs.IndexOf(module.ID)].level != module.level)
        {
            //SAME MODULE EXISTS WITH LOWER LEVEL
            if (modules_IDs.IndexOf(module.ID) != -1 && modules[modules_IDs.IndexOf(module.ID)].level != module.level)
            {
                SpawnModule(module);
            }

            //CHANGE STATS
            if (module.level == 1)
                GetComponent<PlayerMove>().jetpack_force = 2f;
            if (module.level == 2)
                GetComponent<PlayerMove>().jetpack_force = 2.5f;
            if (module.level == 3)
                GetComponent<PlayerMove>().jetpack_force = 3f;
            if (module.level == 4)
                GetComponent<PlayerMove>().jetpack_force = 3.5f;
            if (module.level == 5)
                GetComponent<PlayerMove>().jetpack_force = 4f;

            modules.Add(module);
            modules_IDs.Add(module.ID);
            return (true);
        }
        else
        {
            Debug.Log("Module (" + module.ID + "_Level " + module.level + ") already exists");
            return (false);
        }
    }

    void M_JetpackThrust(Module module, int state)
    {
        if (state == 0)
        {
            SpawnModule(module, true);
            GetComponent<PlayerMove>().jetpack_force = 1.5f;
        }
        else if (state == 1)
        {
            GetComponent<PlayerMove>().jetpack_force = 1.5f;
        }
        else
        {
            if (module.level == 1)
                GetComponent<PlayerMove>().jetpack_force = 2f;
            if (module.level == 2)
                GetComponent<PlayerMove>().jetpack_force = 2.5f;
            if (module.level == 3)
                GetComponent<PlayerMove>().jetpack_force = 3f;
            if (module.level == 4)
                GetComponent<PlayerMove>().jetpack_force = 3.5f;
            if (module.level == 5)
                GetComponent<PlayerMove>().jetpack_force = 4f;
        }
    }

    //-----------------------------------------------------------------

    bool M_WeaponCapacity(Module module)
    {
        if (!modules_IDs.Contains(module.ID) || modules[modules_IDs.IndexOf(module.ID)].level != module.level)
        {
            //SAME MODULE EXISTS WITH LOWER LEVEL
            if (modules_IDs.IndexOf(module.ID) != -1 && modules[modules_IDs.IndexOf(module.ID)].level != module.level)
            {
                SpawnModule(module);
            }

            //CHANGE STATS
            if (module.level == 1)
                GetComponent<PlayerWeaponManager>().maxWeaponCount = 3;
            if (module.level == 2)
                GetComponent<PlayerWeaponManager>().maxWeaponCount = 4;

            modules.Add(module);
            modules_IDs.Add(module.ID);
            return (true);
        }
        else
        {
            Debug.Log("Module (" + module.ID + "_Level " + module.level + ") already exists");
            return (false);
        }
    }

    void M_WeaponCapacity(Module module, int state)
    {
        if (state == 0)
        {
            SpawnModule(module, true);
            GetComponent<PlayerWeaponManager>().maxWeaponCount = 2;
        }
        else if (state == 1)
        {
            GetComponent<PlayerWeaponManager>().maxWeaponCount = 2;
        }
        else
        {
            if (module.level == 1)
                GetComponent<PlayerWeaponManager>().maxWeaponCount = 3;
            if (module.level == 2)
                GetComponent<PlayerWeaponManager>().maxWeaponCount = 4;
        }
    }

    //-----------------------------------------------------------------


    bool M_Deployables(Module module)
    {
        if (!modules_IDs.Contains(module.ID))
        {
            //CHANGE STATS
            GetComponent<DeployablesManager>().ACTIVE = true;

            modules.Add(module);
            modules_IDs.Add(module.ID);
            return (true);
        }
        else
        {
            Debug.Log("Module (" + module.ID + "_Level " + module.level + ") already exists");
            return (false);
        }
    }

    void M_Deployables(Module module, int state)
    {
        if (state == 0)
        {
            SpawnModule(module, true);
            GetComponent<DeployablesManager>().ACTIVE = false;
        }
        else if (state == 1)
        {
            GetComponent<DeployablesManager>().ACTIVE = false;
        }
        else
        {
            GetComponent<DeployablesManager>().ACTIVE = true;
        }
    }

    //-----------------------------------------------------------------

    bool M_Shield(Module module)
    {
        if (!modules_IDs.Contains(module.ID))
        {
            //CHANGE STATS
            GetComponent<PlayerShield>().enabled = true;
            modules.Add(module);
            modules_IDs.Add(module.ID);
            return (true);
        }
        else
        {
            Debug.Log("Module (" + module.ID + "_Level " + module.level + ") already exists");
            return (false);
        }
    }

    void M_Shield(Module module, int state)
    {
        if (state == 0)
        {
            SpawnModule(module, true);
            GetComponent<PlayerShield>().enabled = false;
        }
        else if (state == 1)
        {
            GetComponent<PlayerShield>().enabled = false;
        }
        else
        {
            GetComponent<PlayerShield>().enabled = true;
        }
    }
}
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class PlayerMove : MonoBehaviour
{
    private Rigidbody2D rb;
    private PlayerAnimControl anim;

    public bool rawMovement;
    public bool faceMouseMovement;

    public float runSpeed;
    public float walkSpeed;
    public float lackingFuelSpeed_delta;
    private float speed;
    public float jumpForce;
    public float falling_TerminalV;

    [HideInInspector]
    public bool jumped, hadJumped, crouched, usingJetpack;

    private bool facingRight = true;
    private float moveInput;
    public float maxFuel;
    public float fuel;
    public float move_fuel_efficiency;
    public float jetpack_fuel_efficiency;
    public float jetpack_init_fuel;
    public bool jetpack;
    public float jetpack_force;
    public float jetpack_terminalV;
    public float jetpack_overheat;
    public bool jetpack_overheated;
    public float jetpack_heat;
    public float jetpack_heat_increase;
    public float jetpack_init_heat_increase;
    public float jetpack_heat_decrease;
    public float jetpack_cooldown;
    public float jetpack_cooldown_timer;
    public ParticleSystem jetpack_particles;

    public Transform groundCheck;
    public float groundCheckRadius;
    public LayerMask whatIsGround;

    [HideInInspector]
    public Collider2D onGround;
    // Start is called before the first frame update
    void Start()
    {
        rb = GetComponent<Rigidbody2D>();
        anim = GetComponent<PlayerAnimControl>();
        //jetpack_particles.Stop();

        jetpack_cooldown_timer = jetpack_cooldown;
    }

    // Update is called once per frame
    void FixedUpdate()
    {
        //////////////////////////////////// 좌우 움직임
        if(rawMovement == true)
            moveInput = Input.GetAxisRaw("Horizontal");    //D 누르면 1, A 누르면 -1
        else
            moveInput = Input.GetAxis("Horizontal");    //D 누르면 1로 서서히 변환, A 누르면 -1로 서서히 변환
        

        if(Input.GetKey("left shift"))
            speed = runSpeed;   //Shift 누르면 스피드는 달리기 속도
        else
            speed = walkSpeed;  //아니면 스피드는 일반 속도


        if(Input.GetKey("a") && Input.GetKey("d"))      //A랑 D 같이 누르면 멈추기
            speed = 0;

        if(Input.GetKey("s") && onGround == true)   //S 누르고 땅에 있으면 움츠리고 멈추기
        {
            crouched = true;
            speed = 0;
        }
        else
            crouched = false;

        //Debug.Log(speed);
        if (fuel > 0)
            fuel -= Mathf.Abs(moveInput) * speed / (move_fuel_efficiency + 1);
        else
            fuel = 0;

        if(fuel > 0)
            rb.velocity = new Vector2(moveInput * speed, rb.velocity.y);
        else
            rb.velocity = new Vector2(moveInput * speed * lackingFuelSpeed_delta, rb.velocity.y);


        /////////////////////////////////// 좌우 반전
        if (faceMouseMovement)
        {
            if (!Input.GetKey("e"))
            {
                Vector3 mousePos = Input.mousePosition;
                mousePos = Camera.main.ScreenToWorldPoint(mousePos);

                if (mousePos.x >= Camera.main.transform.position.x)
                    FaceInDirection(true);
                else
                    FaceInDirection(false);
            }
        }
        else
        {
            if (facingRight && moveInput < 0)
                Flip();
            else if (!facingRight && moveInput > 0)
                Flip();
        }

        /////////////////////////////////   제트팩
        if (jetpack)
            Jetpack();


        if(rb.velocity.y < falling_TerminalV)
        {
            rb.velocity = new Vector2(rb.velocity.x, falling_TerminalV);
        }
    }

    private void Update()
    {
        //////////////////////////////////// 점프
        onGround = Physics2D.OverlapCircle(groundCheck.position, groundCheckRadius, whatIsGround);

        if (Input.GetKeyDown("w") && onGround == true)
        {
            rb.velocity = new Vector2(rb.velocity.x, jumpForce);
            jumped = true;
            anim.Jump();
        }

        if(rb.velocity.y == 0 && onGround == true)
            jumped = false;


        if (jetpack && onGround == false && Input.GetKeyDown("w") && fuel > 0 && !jetpack_overheated)
        {
            GetComponent<PlayerAudioManager>().Jetpack_SFX(true);
            usingJetpack = true;
            fuel -= jetpack_init_fuel;
            jetpack_heat += jetpack_init_heat_increase;
        }
    }

    void Jetpack()
    {
        if (usingJetpack && Input.GetKey("w") && fuel > 0 && !jetpack_overheated)
        {
            //Debug.Log("jetpack on, rb.velocity.y: " + rb.velocity.y);
            if (rb.velocity.y <= jetpack_terminalV)
                rb.velocity = new Vector2(rb.velocity.x, rb.velocity.y + jetpack_force);
            jetpack_particles.Play();

            fuel -= 1 / (jetpack_fuel_efficiency + 1);
        }
        if ((usingJetpack == true && !Input.GetKey("w")) || (usingJetpack == true && fuel <= 0) || (usingJetpack == true && jetpack_overheated))
        {
            usingJetpack = false;
            GetComponent<PlayerAudioManager>().Jetpack_SFX(false);
            jetpack_particles.Stop();
        }

        if (usingJetpack)
            jetpack_heat += jetpack_heat_increase;
        else if (!jetpack_overheated && jetpack_heat > 0)
            jetpack_heat -= jetpack_heat_decrease;
        else if (!jetpack_overheated && jetpack_heat <= 0)
            jetpack_heat -= 0;

        if (jetpack_heat >= jetpack_overheat)
        {
            jetpack_overheated = true;
            jetpack_cooldown_timer -= 1;

            if (jetpack_cooldown_timer <= 0)
            {
                jetpack_cooldown_timer = jetpack_cooldown;
                jetpack_overheated = false;
                jetpack_heat = 0;
            }
        }
    }
    /////////////////////////////////// 좌우 반전 함수
    void Flip()
    {
        facingRight = !facingRight;
        Vector2 scaler = transform.localScale;
        scaler.x *= -1;
        transform.localScale = scaler;
    }

    void FaceInDirection(bool faceRight)
    {
        if (faceRight)
            transform.localScale = new Vector3(1, 1, 1);
        else
            transform.localScale = new Vector3(-1, 1, 1);
    }

    //////////////////////////  EXTERNAL FUNCTIONS
    public float AddFuel(float amount)
    {
        if (fuel + amount > maxFuel)
        {
            fuel = maxFuel;
            return (amount - (maxFuel - fuel));
        }
        else
        { 
            fuel += amount;
            return (0f);
        }
    }
}
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class PlayerPickUp : MonoBehaviour
{
    public float pickUpRadius;
    public LayerMask pickUp_layer;

    public float coolDown;
    private float coolDown_Timer;

    public GameObject weaponsFolder;

    [HideInInspector]
    public Crate activeCrate;

    [HideInInspector]
    public GameObject selectedItem;

    void Update()
    {
        Collider2D[] checkRadius = Physics2D.OverlapCircleAll(transform.position, pickUpRadius, pickUp_layer);
        GameObject closestItem = null;
        float minDistance = Mathf.Infinity;

        if (checkRadius != null)
        {
            
            foreach (Collider2D item in checkRadius)
            {
                float distance;
                if (Input.GetKey("f"))
                {
                    distance = Vector2.Distance(Camera.main.ScreenToWorldPoint(Input.mousePosition), item.transform.position);
                }

                else
                {
                    distance = Vector2.Distance(transform.position, item.transform.position);
                }
                GameObject itemParent = item.transform.parent.gameObject;

                if (distance < minDistance && (itemParent.transform.parent == null || !itemParent.transform.parent.tag.Contains("Player/Inventory")))
                {
                    closestItem = item.gameObject;
                    minDistance = distance;
                }
            }

            if (closestItem != null)
                selectedItem = closestItem.gameObject;
            else
                selectedItem = null;
            //Debug.Log(selectedItem);

            if (coolDown_Timer >= coolDown)
            {
                PickUp(closestItem);
            }
            else
            {
                coolDown_Timer += Time.deltaTime;
            }
        }
        

    }

    void PickUp(GameObject item)
    {
        if (Input.GetKeyDown("e") || (Input.GetMouseButtonDown(1) && Input.GetKey("f")))
        {
            if (item != null)
            {
                switch (item.GetComponent<ItemPickUp>().targetScript)
                {
                    case "WeaponStats":
                        item.GetComponent<ItemPickUp>().PickUp(weaponsFolder.transform);
                        break;
                    case "Crate":
                        item.GetComponent<ItemPickUp>().PickUp(null);
                        activeCrate = item.transform.parent.GetComponent<Crate>();
                        break;
                    default:
                        item.GetComponent<ItemPickUp>().PickUp(transform);
                        break;
                }
            }

            coolDown_Timer = 0.0f;
        }
    }
}
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class PlayerShield : MonoBehaviour
{
    private GM _GM_;

    public GameObject shield;
    public AudioClip shieldOnSFX;
    public bool on;
    private bool on_flag;
    public float duration;
    private float duration_timer;
    public float delay;
    private float delay_timer;

    public float fuelConsumption;

    void Start()
    {
        _GM_ = GM.GetGM();
        _GM_.AddShootingActiveSwitch("PlayerShield");
        _GM_.shooting_active_switches[_GM_.shooting_active_keys.IndexOf("PlayerShield")] = true;
        shield.GetComponent<BoxCollider2D>().enabled = false;
        shield.GetComponent<SpriteRenderer>().enabled = false;
    }

    void Update()
    {
        if (Input.GetKey("s") && on && delay_timer >= delay && on_flag)
        {
            //_GM_.shooting_active_switches[_GM_.shooting_active_keys.IndexOf("PlayerShield")] = false;
            if (shield.GetComponent<BoxCollider2D>().enabled == false)
                shield.GetComponent<AudioSource>().PlayOneShot(shieldOnSFX);

            shield.GetComponent<BoxCollider2D>().enabled = true;
            shield.GetComponent<Animator>().SetBool("Shield", true);
            duration_timer += Time.deltaTime;

            GetComponent<PlayerMove>().fuel -= fuelConsumption * Time.deltaTime;

            if(duration_timer >= duration)
            {
                duration_timer = 0;
                delay_timer = 0;
                on_flag = false;
            }
        }
        else
        {
            _GM_.shooting_active_switches[_GM_.shooting_active_keys.IndexOf("PlayerShield")] = true;
            duration_timer = 0;
            shield.GetComponent<BoxCollider2D>().enabled = false;
            shield.GetComponent<Animator>().SetBool("Shield", false);
            delay_timer += Time.deltaTime;
        }

        if (!Input.GetKey("s"))
            on_flag = true;

        if (Input.GetKeyDown("v"))
        {
            GM.DisplayText2("Shield Toggled", true);
            on = !on;
        }
    }
}
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class PlayerStats : MonoBehaviour
{
    private GM _GM_;

    public bool god;

    public float maxHealth;
    public float health;
    public bool alive = true;

    public GameObject[] corpse;

    public float corpseSpawnOffset;

    public GameObject explosion;
    public float explosionForce;
    public float explosionRadius;
    public float explosionDuration;

    // Start is called before the first frame update
    void Start()
    {
        _GM_ = GameObject.FindGameObjectWithTag("GM").GetComponent<GM>();
    }

    // Update is called once per frame
    void Update()
    {
        if(health <= 0)
        {
            alive = false;
            Die();
        }
        if (health > maxHealth)
            health = maxHealth;
    }

    public void TakeDamage(float damage)
    {
        if(health > 0 && !god)
            health -= damage;
    }

    public void Die()
    {

        ////////////////////    Drop all items
        PlayerWeaponManager wm = GetComponent<PlayerWeaponManager>();

        List<GameObject> weapons = wm.weapons;

        ////////////////////    Spawn bodyparts
        foreach(GameObject bodyPart in corpse)
        {
            Instantiate(bodyPart, transform.position + new Vector3(Random.Range(-corpseSpawnOffset, corpseSpawnOffset), Random.Range(-corpseSpawnOffset, corpseSpawnOffset), 0.0f), Quaternion.identity);
        }

        ////////////////////    Explode
        GameObject thisExplosion = explosion;
        CircleCollider2D thisCollider = thisExplosion.GetComponent<CircleCollider2D>();
        PointEffector2D thisEffector = thisExplosion.GetComponent<PointEffector2D>();

        thisCollider.radius = explosionRadius;
        thisEffector.forceMagnitude = explosionForce;

        thisExplosion.GetComponent<Explosion>().duration = explosionDuration;

        Instantiate(explosion, transform.position, Quaternion.identity);

        ///////////////////     Self Destruct
        GameObject.FindGameObjectWithTag("PlayerGraphics").SetActive(false);
        GameObject.FindGameObjectWithTag("PlayerJetpack").SetActive(false);
        GetComponent<PlayerMove>().enabled = false;
        GetComponent<PlayerPickUp>().enabled = false;
        GetComponent<PlayerAnimControl>().enabled = false;
        GetComponent<PlayerWeaponManager>().enabled = false;

        GetComponent<Animator>().enabled = false;
        GetComponent<BoxCollider2D>().enabled = false;
        GetComponent<CircleCollider2D>().enabled = false;
        GetComponent<Rigidbody2D>().simulated = false;

        foreach (GameObject weapon in weapons)
        {
            weapon.SetActive(true);
            weapon.GetComponent<WeaponStats>().Drop();
            weapon.GetComponent<WeaponStats>().is_shooting = false;
            weapon.GetComponent<Animator>().SetBool("Shooting", false);
            //Debug.Log("Weapon dropped");
        }

        GameObject.FindGameObjectWithTag("UI").GetComponent<UI_Dead>().Dead();

        //GameObject.FindGameObjectWithTag("Cursor").GetComponent<Cursory>().enabled = false;
        //GameObject.FindGameObjectWithTag("Cursor").GetComponent<SpriteRenderer>().enabled = false;
        //Cursor.visible = true;

        _GM_.playerAlive = false;

        enabled = false;
    }
}
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class PlayerWeaponManager : MonoBehaviour
{
    /// <summary>
    /// 플레이어 무기 매니저 스크립트
    /// -무기 전환
    /// -무기 줍기
    /// -무기/플레이어 애니메이션 싱크로
    /// -WeaponStats 와 PlayerAnimControl 사이의 통로 역할
    /// </summary>

    private MasterWeaponManagement _WM_;

    public int maxWeaponCount;
    private Animator anim;
    private PlayerAnimControl ac;
    private PlayerMove pm;

    public Transform gunFolder_Default;
    public Transform gunFolder_Crouched;
    public Transform activeGunFolder;
    public Transform GUN;

    public List<GameObject> weapons;
    public GameObject activeWeapon;
    private GameObject lastActiveWeapon;
    //public GameObject defaultWeapon;

    private bool reloading;

    //각 무기 애니메이션 변수 설정
    [HideInInspector]
    public WeaponStats AW_WS;
    private string AW_category;
    private bool AW_rapidFire = true;
    private float AW_reloadDelay;
    private float AW_reloadDelayTimer;
    [HideInInspector]
    public string AW_ammoType;

    public List<string> ammo_type;
    public List<int> ammo_count;
    public List<int> ammo_max;


    void Start()    ////////////////////////    셋업      //////////////////////////
    {
        _WM_ = GameObject.FindGameObjectWithTag("GM").GetComponent<MasterWeaponManagement>();   //  마스터 무기 매니저 스크립트
        anim = GetComponent<Animator>();    // 플레이어 애니메이터
        ac = GetComponent<PlayerAnimControl>();     // 플레이어 애니메이션 매니저 스크립트
        pm = GetComponent<PlayerMove>();
        activeGunFolder = gunFolder_Default;
        //defaultWeapon.GetComponent<WeaponStats>().PickUp(transform);

        //  무기 수 제한
        while (weapons.Count > maxWeaponCount)
        {
            weapons[weapons.Count - 1].GetComponent<WeaponStats>().Drop();
            weapons.Remove(weapons[weapons.Count - 1]);
        }
        // 총이 없을 때
        if (activeWeapon == null)
        {
            SetCategoryAnimWeight(anim.GetLayerIndex("Default [Type-0]"), false);
        }
    }

    void Update()   ///////////////////////     업데이트        /////////////////////////
    {
        if(weapons.Count == 0) { activeWeapon = null; }

        if (pm.crouched)
        {
            foreach(GameObject weapon in weapons)
                SetWeaponsFolder(weapon, gunFolder_Crouched);
            //SetWeaponsFolder(defaultWeapon, gunFolder_Crouched);
        }
        else
        {
            foreach (GameObject weapon in weapons)
                SetWeaponsFolder(weapon, gunFolder_Default);
            //SetWeaponsFolder(defaultWeapon, gunFolder_Default);
        }

        // IK
        /*
        if (AW_WS != null && !AW_WS.is_reloading)
        {
            GetComponent<Gun_Rotation>().Arm();
            //GUN.parent = GetComponent<Gun_Rotation>().pivot;
        }
        else
        {
            GetComponent<Gun_Rotation>().Disarm();
            //GUN.parent = transform;
        }
        */

        // 총 발사하고 있다면 발사 애니메이션 플레이
        if (activeWeapon != null)
        {
            SetVariables();
            Animate();
            SwitchWeapons();

            if (Input.GetKeyDown(KeyCode.Tab))
            {
                lastActiveWeapon = activeWeapon;
                activeWeapon.SetActive(false);
                activeWeapon = null;
                SetCategoryAnimWeight(anim.GetLayerIndex("Default [Type-0]"), false);
            }
        }
        else
        {
            if (Input.GetKeyDown(KeyCode.Tab) && weapons.Count > 0)
            {
                activeWeapon = lastActiveWeapon;
                activeWeapon.SetActive(true);
                SetCategoryAnimWeight(anim.GetLayerIndex(AW_category), true);
            }
        }
    }

    public void Arm(GameObject weapon)      //무기 줍기
    {
        GM.DisplayText("Weapon picked up:" + weapon.GetComponent<WeaponStats>().name, true);

        if (weapons.Count > maxWeaponCount)
        {
            if (activeWeapon != null)
            {
                activeWeapon.SetActive(true);
                activeWeapon.GetComponent<WeaponStats>().Drop();
                weapons.Remove(activeWeapon);
            }
            else if (activeWeapon == null)
            {
                Drop(lastActiveWeapon);
            }
        }
        else if (activeWeapon != null)
        {
            activeWeapon.SetActive(false);
        }
        activeWeapon = weapon;
        //GetComponent<Gun_Rotation>().pivot.rotation = Quaternion.identity;
        SetVariables();
        SetCategoryAnimWeight(anim.GetLayerIndex(AW_category), true);
    }

    public void Drop(GameObject weapon)
    {
        if(weapon == activeWeapon)
        {
            if (activeWeapon != weapons[0])
                lastActiveWeapon = weapons[0];
            else if (weapons.Count == 1)
                lastActiveWeapon = null;

            activeWeapon = null;
            SetCategoryAnimWeight(anim.GetLayerIndex("Default [Type-0]"), false);
        }

        weapon.SetActive(true);
        weapon.GetComponent<WeaponStats>().Drop();
        weapons.Remove(weapon);
    }

    void SwitchWeapons()        //무기 전환
    {
        if (Input.GetKeyDown("q"))
        {
            if (activeWeapon != weapons[weapons.Count - 1])

            {
                activeWeapon.SetActive(false);
                activeWeapon = weapons[weapons.IndexOf(activeWeapon) + 1];
                activeWeapon.SetActive(true);
            }
            else
            {
                activeWeapon.SetActive(false);
                activeWeapon = weapons[0];
                activeWeapon.SetActive(true);
            }
            SetVariables();
            //SetCategoryAnimWeight(anim.GetLayerIndex(AW_category), true);
        }
    }

    void SetCategoryAnimWeight(int index, bool useLegs)     //애니메이션 종류 설정
    {
        for (int i = 0; i < anim.layerCount; i++)
        {
            anim.SetLayerWeight(i, 0);
        }
        anim.SetLayerWeight(index, 100);
        if(useLegs == true)
            anim.SetLayerWeight(anim.GetLayerIndex("Legs Only"), 100);   //다리는 따로 움직이게
    }

    void Animate()
    {
        if(AW_rapidFire == true)        //연사 발사 애니메이션 플레이
        {
            if (AW_WS.is_shooting == true)
                ac.Shoot(activeWeapon, true, true);
            else
                ac.Shoot(activeWeapon, false, true);
        }
        
        /*
        if (AW_WS.is_reloading == true)       //일정 딜레이 후 재장전 애니메이션 플레이
        {
            if(reloading == false)
            {
                AW_reloadDelayTimer += Time.deltaTime;
                if (AW_reloadDelayTimer >= AW_reloadDelay)
                {
                    ac.Reload();
                    reloading = true;
                    AW_reloadDelayTimer = 0.0f;
                }
            }
        }
        else
        {
            reloading = false;
        }

        if(AW_WS.is_aiming == true)
            ac.Aim(true);
        else
            ac.Aim(false);
            */

    }

    public void Shoot()     //한번 쏘는 애니메이션 플레이
    {
        ac.Shoot(activeWeapon, true, false);
    }

    void SetVariables()     //변수 설정
    {
        AW_WS = activeWeapon.GetComponent<WeaponStats>();
        AW_category = AW_WS.category;
        AW_rapidFire = AW_WS.rapidFire;
        AW_reloadDelay = AW_WS.reloadAnimDelay;
        AW_ammoType = AW_WS.ammoType;
    }

    void SetWeaponsFolder(GameObject weapon, Transform folder)
    {
        weapon.transform.parent = folder;
        weapon.transform.position = folder.position;
        weapon.transform.rotation = folder.rotation;
        weapon.transform.localScale = folder.localScale;
    }
}
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class Stats_Module : MonoBehaviour
{
    public Module module;
}
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class StunArm : MonoBehaviour
{
    private GM _GM_;
    private GameObject player;
    private WeaponStats ws;

    public LayerMask enemyLayers;

    public float damage;
    public float rechargeSpeed;
    public float stunDuration;
    public float knockbackForce;

    public Transform damagePoint;
    public float damageRadius;

    [HideInInspector]
    public float recharge_Timer;

    void Start()
    {
        _GM_ = GameObject.FindGameObjectWithTag("GM").GetComponent<GM>();
        player = _GM_.player;
        ws = transform.parent.GetComponent<WeaponStats>();
    }

    void Update()
    {
        if(recharge_Timer >= rechargeSpeed)
        {
            if (Input.GetMouseButton(0))
            {
                Shock();
                recharge_Timer = 0.0f;
            }
        }
        else
        {
            recharge_Timer += Time.deltaTime;
        }
    }

    void Shock()
    {
        ws.Shoot();

        Collider2D[] hit = Physics2D.OverlapCircleAll(damagePoint.position, damageRadius, enemyLayers);

        foreach(Collider2D enemy in hit)
        {
            EnemyStats enemyStats = enemy.gameObject.GetComponent<EnemyStats>();
            if (enemyStats != null)
            {
                //enemyStats.TakeDamage(damage, stunDuration);

                int val1 = 0;
                if (enemy.transform.position.x >= transform.position.x)
                    val1 = 1;
                else
                    val1 = -1;

                //enemyStats.Knockback(knockbackForce, "simpleX", val1);
            }
        }
    }
}
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using TMPro;

public class TextAlternator : MonoBehaviour
{
    public List<string> texts;
    public List<string> texts_variants;
    public float interval;
    private float interval_timer;
    private bool flag;
    public int index;

    private void Start()
    {
        index = Random.Range(0, texts.Count - 1);
    }

    void Update()
    {
        interval_timer += Time.deltaTime;
        if(interval_timer >= interval)
        {
            if (flag)
                GetComponent<TextMeshProUGUI>().text = texts[index];
            else
                GetComponent<TextMeshProUGUI>().text = texts_variants[index];
            interval_timer = 0;
            flag = !flag;
        }
    }
}
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class Turret1 : MonoBehaviour
{
    private GM _GM_;
    private GameObject player;

    public AudioClip shotSFX;

    public GameObject gun;
    public GameObject bullet;
    public Transform barrelEnd;

    public bool attack;
    public LayerMask whatIsGround;
    public float alertDistance;
    public float alertDistance_shot;
    public float attackDistance;

    private Quaternion gunInitRot;
    public float aimSpeed;

    public float accuracy;
    public float damage;
    public float bulletSpeed;
    public float fireRate;
    private float fireRate_timer;

    public float maxAmmoCount;
    public float ammoCount;
    public float reloadSpeed;
    private float reloadSpeed_timer;

    // Start is called before the first frame update
    void Start()
    {
        _GM_ = GameObject.FindGameObjectWithTag("GM").GetComponent<GM>();
        player = _GM_.player;
        ammoCount = maxAmmoCount;
        gunInitRot = gun.transform.rotation;
    }

    // Update is called once per frame
    void FixedUpdate()
    {
        RaycastHit2D wallInSight = Physics2D.Raycast(transform.position, player.transform.position - transform.position, Vector2.Distance(transform.position, player.transform.position), whatIsGround);
        if (Vector2.Distance(transform.position, player.transform.position) < alertDistance && wallInSight.collider == null)
        {
            attack = true;
        }
        if (Vector2.Distance(transform.position, player.transform.position) > attackDistance || wallInSight.collider != null)
            attack = false;
        if (attack)
        AimGun();
        else
        {
            if (transform.localEulerAngles.y != 0)
                gunInitRot.y = 180;
            else
                gunInitRot.y = 0;
            gun.transform.rotation = Quaternion.Lerp(gun.transform.rotation, gunInitRot, aimSpeed);
        }
    }

    private void Update()
    {
        if (!_GM_.playerAlive)
            attack = false;

        if (attack)
            UseGun();
    }

    void AimGun()
    {
        Vector3 targ = player.transform.position;
        targ.z = 0f;

        Vector2 objectPos = gun.transform.position;
        targ.x = targ.x - objectPos.x;
        targ.y = targ.y - objectPos.y;

        float angle = Mathf.Atan2(targ.y, targ.x) * Mathf.Rad2Deg;
        gun.transform.rotation = Quaternion.Lerp(gun.transform.rotation, Quaternion.Euler(new Vector3(gun.transform.rotation.x, 0, angle)), aimSpeed);
    }

    void UseGun()
    {
        fireRate_timer += Time.deltaTime;
        if (fireRate_timer >= fireRate && ammoCount > 0)
        {
            Fire();

            ammoCount -= 1;

            fireRate_timer = 0;
        }

        else if (ammoCount <= 0)
        {
            reloadSpeed_timer += Time.deltaTime;
            if (reloadSpeed_timer >= reloadSpeed)
            {
                ammoCount = maxAmmoCount;
                reloadSpeed_timer = 0;
            }
        }

        /////////////////////////////   Internal Functions
        void Fire()
        {
            GameObject thisBullet = bullet;
            EnemyBullet2 thisBulletScript = thisBullet.GetComponent<EnemyBullet2>();

            thisBulletScript.accuracy = accuracy;
            thisBulletScript.damage = damage;
            thisBulletScript.speed = bulletSpeed;

            Vector3 bulletRotation = gun.transform.localEulerAngles - transform.localEulerAngles;
            bulletRotation.y = 0;

            GetComponent<AudioSource>().PlayOneShot(shotSFX);

            Instantiate(thisBullet, barrelEnd.position, Quaternion.Euler(bulletRotation));
        }
    }
}
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

[System.Serializable]
public class UI_Module
{
    public string ID;
    public GameObject obj;
    public int page;
}

public class UI_ControlPanel2 : MonoBehaviour
{
    private GM _GM_;

    public GameObject panel;
    //public GameObject darken;

    public bool opened;

    public List<Module> modules;
    public List<UI_Module> UI_modules;

    void Start()
    {
        panel.SetActive(false);
        //darken.SetActive(false);
        opened = false;
        _GM_ = GameObject.FindGameObjectWithTag("GM").GetComponent<GM>();
        _GM_.AddShootingActiveSwitch("UI_ControlPanel2");
        _GM_.shooting_active_switches[_GM_.shooting_active_keys.IndexOf("UI_ControlPanel2")] = true;
    }

    private void Update()
    {
        if (Input.GetKeyUp(KeyCode.F1) && _GM_.playerAlive && !_GM_.paused)
            OpenClose();

        if (!_GM_.playerAlive)
        {
            panel.SetActive(false);
            _GM_.shooting_active_switches[_GM_.shooting_active_keys.IndexOf("UI_ControlPanel2")] = false;
        }
    }

    public void AddModule(Module module)
    {
        foreach(UI_Module ui_module in UI_modules)
        {
            if(ui_module.ID == module.accessPanel_ID)
            {
                ui_module.obj.SetActive(true);
            }
        }
    }

    public void RemoveModule(Module module)
    {
        foreach (UI_Module ui_module in UI_modules)
        {
            if (ui_module.ID == module.accessPanel_ID)
            {
                ui_module.obj.SetActive(false);
            }
        }
    }

    public void OpenClose()
    {
        if (panel.activeInHierarchy == false)
        {
            panel.SetActive(true);
            //darken.SetActive(true);
            opened = true;
            _GM_.shooting_active_switches[_GM_.shooting_active_keys.IndexOf("UI_ControlPanel2")] = false;

            //GameObject.FindGameObjectWithTag("Cursor").GetComponent<Cursory>().enabled = false;
            //GameObject.FindGameObjectWithTag("Cursor").GetComponent<SpriteRenderer>().enabled = false;
            //Cursor.visible = true;
        }
        else
        {
            panel.SetActive(false);
            //darken.SetActive(false);
            opened = false;
            _GM_.shooting_active_switches[_GM_.shooting_active_keys.IndexOf("UI_ControlPanel2")] = true;

            //GameObject.FindGameObjectWithTag("Cursor").GetComponent<Cursory>().enabled = true;
            //GameObject.FindGameObjectWithTag("Cursor").GetComponent<SpriteRenderer>().enabled = true;
            //Cursor.visible = false;
        }
    }
}
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using TMPro;

public class UI_Dead : MonoBehaviour
{
    public GameObject deathMenu;
    //public GameObject deathMenu2;
    public GameObject darken;

    public GameObject[] buttons;
    public TMP_InputField PW;
    public TMP_InputField INFO;
    public TextMeshProUGUI taunt;

    private void Awake()
    {
        if (GM.GetGM().useDeathConfirm)
        {
            buttons[0].SetActive(false);
            buttons[1].SetActive(false);
        }
        else
        {
            PW.gameObject.SetActive(false);
            INFO.gameObject.SetActive(false);
        }
    }

    public void Dead()
    {
        deathMenu.SetActive(true);
        darken.SetActive(true);
    }

    public void PWEntered()
    {
        Debug.Log(PW.text + "/" + GM.GetGM().ConfirmPW);
        if((PW.text == GM.GetGM().ConfirmPW))
        {
            //Debug.Log("FUCK");
            GM.DisplayText("Saving scores. . .", true);
            GM.GetGM().data.WriteData("[" + GM.GetGM().gameObject.GetComponent<LevelManager>().level + "/"+ INFO.text + "/" + GM.GetGM().clock.clockText_score.text + "/" + GM.GetGM().clock.killsText_score.text + "]");
            GM.GetUI().GetComponent<UI_Scores>().Refresh();
            buttons[0].SetActive(true);
            buttons[1].SetActive(true);
        }
    }
}
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;
using TMPro;

public class UI_Deployables : MonoBehaviour
{
    private DeployablesManager source;

    public GameObject panel;
    public TextMeshProUGUI name_text;
    public TextMeshProUGUI count_text;
    public Image icon;

    
    // Start is called before the first frame update
    void Start()
    {
        source = GameObject.FindGameObjectWithTag("Player").GetComponent<DeployablesManager>();
    }

    // Update is called once per frame
    void Update()
    {
        if (!source.ACTIVE)
            panel.SetActive(false);
        else
            panel.SetActive(true);

        if(source.activeDPLYBL_count > 0)
        {
            name_text.text = source.activeDPLYBL_name;
            count_text.text = "0" + source.activeDPLYBL_count.ToString();
            icon.enabled = true;
            icon.sprite = source.activeDPLYBL_IMG;
        }
        else
        {
            name_text.text = "EMPTY";
            count_text.text = "";
            icon.enabled = false;
        }
    }
}
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;
using TMPro;

public class UI_Fuel : MonoBehaviour
{
    private GM _GM_;
    private GameObject player;

    private float fuel;
    private float maxFuel;

    public TextMeshProUGUI UI_fuel;
    public GameObject noFuelText;
    public Image image;
    public Image bg;

    public float alertFuel;
    public float criticalFuel;

    public Color defaultColor;
    public Color alertColor;
    public Color criticalColor;
    public Color noneColor;
    public Color BG_defaultColor;
    public Color BG_usingColor;

    float lastFuel;

    // Start is called before the first frame update
    void Start()
    {
        _GM_ = GameObject.FindGameObjectWithTag("GM").GetComponent<GM>();
        player = _GM_.player;

        fuel = player.GetComponent<PlayerMove>().fuel;
        maxFuel = player.GetComponent<PlayerMove>().maxFuel;

        lastFuel = fuel;
    }

    // Update is called once per frame
    void Update()
    {
        fuel = player.GetComponent<PlayerMove>().fuel;
        maxFuel = player.GetComponent<PlayerMove>().maxFuel;

        /*
        if (fuel < lastFuel)
        {
            bg.color = BG_usingColor;
        }
        else
        {
            bg.color = BG_defaultColor;
        }
        lastFuel = fuel;
        */


        if (fuel < 0)
            fuel = 0;

        string displayText = Mathf.Ceil(fuel) + "_ml";

        if (fuel > 0)
        {
            UI_fuel.text = displayText;
            noFuelText.SetActive(false);
        }
        else
        {
            if(!noFuelText.activeInHierarchy)
                GM.DisplayText("Fuel Emptied", false);
            UI_fuel.text = "_EMPTY_";
            noFuelText.SetActive(true);
        }

        image.fillAmount = fuel / maxFuel;

        if (fuel <= 0)
        {
            image.color = noneColor;
        }
        else if (fuel <= criticalFuel)
        {
            image.color = criticalColor;
        }
        else if (fuel <= alertFuel)
        {
            image.color = alertColor;
        }
        else
        {
            image.color = defaultColor;
        }

    }
}
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using TMPro;
using UnityEngine.UI;

public class UI_Health : MonoBehaviour
{
    private GM _GM_;
    private GameObject player;

    private float health;
    private float maxHealth;

    public TextMeshProUGUI UI_health;
    public Image image;
    public GameObject damageMask;

    public float alertHealth;
    public float criticalHealth;

    public Color defaultColor;
    public Color alertColor;
    public Color criticalColor;
    public Color deadColor;

    float lastHealth;

    // Start is called before the first frame update
    void Start()
    {
        _GM_ = GameObject.FindGameObjectWithTag("GM").GetComponent<GM>();
        player = _GM_.player;

        health = player.GetComponent<PlayerStats>().health;
        maxHealth = player.GetComponent<PlayerStats>().maxHealth;

        lastHealth = health;
    }

    // Update is called once per frame
    void Update()
    {
        health = player.GetComponent<PlayerStats>().health;
        maxHealth = player.GetComponent<PlayerStats>().maxHealth;

        if(health < lastHealth && health < maxHealth)
        {
            //Debug.Log("H: " + health + ", L: " + lastHealth);
            damageMask.GetComponent<Animator>().SetTrigger("Damaged");
        }
        lastHealth = health;
        

        if (health < 0)
            health = 0;

        string displayText = Mathf.Ceil(health) + "/" + Mathf.Ceil(maxHealth);

        UI_health.text = displayText;

        if(health <= 0)
        {
            image.color = deadColor;
        }
        else if(health <= criticalHealth)
        {
            image.color = criticalColor;
        }
        else if(health <= alertHealth)
        {
            image.color = alertColor;
        }
        else
        {
            image.color = defaultColor;
        }


    }
}
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using TMPro;

public class UI_HelpText : MonoBehaviour
{
    public TextMeshProUGUI helpText;
    public float displayTime;
    private float displayTime_timer;
    public float fadeTime;
    public float fadeTime_timer;
    public int lineLimit;
    [HideInInspector]
    public int line;

    void Update()
    {
        if (displayTime_timer > 0)
            displayTime_timer -= Time.deltaTime;
        else
        {
            if(fadeTime_timer > 0)
                fadeTime_timer -= Time.deltaTime;
            else
            {
                helpText.text = string.Empty;
                fadeTime_timer = 0;
                line = 0;
            }
        }
        if (line > lineLimit)
        {
            //Debug.Log("OVER");
            //Debug.Log("INDEX:" + helpText.text.IndexOf("\n"));
            string txt = helpText.text.Remove(0, helpText.text.IndexOf("\n") + 1);
            helpText.text = txt;
            line --;
        }
        //Debug.Log("LINE:" + line);
        helpText.color = new Color(helpText.color.r, helpText.color.g, helpText.color.b, fadeTime_timer / fadeTime);
    }

    public void DisplayText(string text)
    {
        //Debug.Log(text);
        helpText.text += text+"\n";
        line++;
        displayTime_timer = displayTime;
        fadeTime_timer = fadeTime;
    }
}
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using TMPro;
using UnityEngine.UI;

public class UI_HelpText_2 : MonoBehaviour
{
    public TextMeshProUGUI helpText;
    public Image BG;
    public Color BG_InitColor;
    public float displayTime;
    private float displayTime_timer;
    public float fadeTime;
    public float fadeTime_timer;
    public int lineLimit;
    [HideInInspector]
    public int line;

    void Update()
    {
        if (displayTime_timer > 0)
            displayTime_timer -= Time.deltaTime;
        else
        {
            if (fadeTime_timer > 0)
                fadeTime_timer -= Time.deltaTime;
            else
            {
                helpText.text = string.Empty;
                fadeTime_timer = 0;
                line = 0;
            }
        }
        if (line > lineLimit)
        {
            //Debug.Log("OVER");
            //Debug.Log("INDEX:" + helpText.text.IndexOf("\n"));
            string txt = helpText.text.Remove(0, helpText.text.IndexOf("\n") + 1);
            helpText.text = txt;
            line--;
        }
        //Debug.Log("LINE:" + line);
        helpText.color = new Color(helpText.color.r, helpText.color.g, helpText.color.b, fadeTime_timer / fadeTime);
        BG.color = new Color(BG.color.r, BG.color.g, BG.color.b, (fadeTime_timer / fadeTime) * BG_InitColor.a);
    }

    public void DisplayText(string text)
    {
        //Debug.Log(text);
        helpText.text += text + "\n";
        line++;
        displayTime_timer = displayTime;
    }
}
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;
using TMPro;

public class UI_Inventory : MonoBehaviour
{
    private GM _GM_;
    [HideInInspector]
    public GameObject player;

    public GameObject inventoryPanel;

    [HideInInspector]
    public PlayerWeaponManager pw;
    [HideInInspector]
    public DeployablesManager dm;
    public List<TextMeshProUGUI> weaponSlots;
    public List<TextMeshProUGUI> ammoSlots;
    public List<TextMeshProUGUI> deployableSlots;

    public GameObject selectPanel;

    [HideInInspector]
    public int selectedWeaponIndex = -1, selectedAmmoIndex = -1, selectedDeployableIndex = -1;

    // Start is called before the first frame update
    void Start()
    {
        _GM_ = GameObject.FindGameObjectWithTag("GM").GetComponent<GM>();
        _GM_.AddShootingActiveSwitch("UI_Inventory");
        player = _GM_.player;
        pw = player.GetComponent<PlayerWeaponManager>();
        dm = player.GetComponent<DeployablesManager>();
        selectPanel.SetActive(false);
        inventoryPanel.SetActive(false);
    }

    // Update is called once per frame
    void Update()
    {
        RefreshWeaponSlots();
        RefreshAmmoSlots();
        RefreshDeployableSlots();

        if (Input.GetKeyDown("y") && _GM_.playerAlive && !_GM_.paused)
        {
            OpenClose();
        }

        if (!_GM_.playerAlive)
        {
            inventoryPanel.SetActive(false);
            _GM_.shooting_active_switches[_GM_.shooting_active_keys.IndexOf("UI_Inventory")] = false;
        }
    }

    public void OpenClose()
    {
        if (inventoryPanel.activeInHierarchy)
        {
            inventoryPanel.SetActive(false);
            _GM_.shooting_active_switches[_GM_.shooting_active_keys.IndexOf("UI_Inventory")] = true;
        }
        else
        {
            inventoryPanel.SetActive(true);
            _GM_.shooting_active_switches[_GM_.shooting_active_keys.IndexOf("UI_Inventory")] = false;
        }
    }

    void RefreshWeaponSlots()
    {
        for (int i = 0; i < weaponSlots.Count; i++)
        {
            try
            {
                weaponSlots[i].transform.parent.GetComponent<Button>().enabled = true;
                weaponSlots[i].text = " " + pw.weapons[i].GetComponent<WeaponStats>().name + " [" + pw.weapons[i].GetComponent<WeaponStats>().ammoType + "]";
            }
            catch
            {
                weaponSlots[i].text = " -";
                weaponSlots[i].transform.parent.GetComponent<Button>().enabled = false;
            }
            
        }
    }

    void RefreshAmmoSlots()
    {
        for (int i = 0; i < ammoSlots.Count; i++)
        {
            try
            {
                if(pw.ammo_count[i] > 0)
                {
                    ammoSlots[i].transform.parent.GetComponent<Button>().enabled = true;
                    ammoSlots[i].text = " " + pw.ammo_type[i] + " x (" + pw.ammo_count[i] + ")";
                }
                else
                {
                    ammoSlots[i].text = " -";
                    ammoSlots[i].transform.parent.GetComponent<Button>().enabled = false;
                }
            }
            catch
            {
                ammoSlots[i].text = " -";
                ammoSlots[i].transform.parent.GetComponent<Button>().enabled = false;
            }
        }
    }

    void RefreshDeployableSlots()
    {
        for (int i = 0; i < deployableSlots.Count; i++)
        {
            try
            {
                deployableSlots[i].text = " " + dm.dplybles_name[i] + " x (" + dm.dplybles_count[i] + ")";
                deployableSlots[i].transform.parent.GetComponent<Button>().enabled = true;
            }
            catch
            {
                deployableSlots[i].text = " -";
                deployableSlots[i].transform.parent.GetComponent<Button>().enabled = false;
            }

        }
    }

    public void SelectSlotWeapon(int index)
    {
        if (selectedWeaponIndex != index)
        {
            selectedWeaponIndex = index;
            selectPanel.SetActive(true);
            selectPanel.transform.position = Input.mousePosition;
            selectPanel.GetComponent<UI_Inventory_SelectPanel>().index = index;
            selectPanel.GetComponent<UI_Inventory_SelectPanel>().type = "Weapon";
        }
        else
        {
            selectPanel.SetActive(false);
            selectedWeaponIndex = -1;
        }
        
    }
    public void SelectSlotAmmo(int index)
    {
        if (selectedAmmoIndex != index)
        {
            selectedAmmoIndex = index;
            selectPanel.SetActive(true);
            selectPanel.transform.position = Input.mousePosition;
            selectPanel.GetComponent<UI_Inventory_SelectPanel>().index = index;
            selectPanel.GetComponent<UI_Inventory_SelectPanel>().type = "Ammo";
        }
        else
        {
            selectPanel.SetActive(false);
            selectedAmmoIndex = -1;
        }
    }
    public void SelectSlotDeployable(int index)
    {
        if (selectedDeployableIndex != index)
        {
            selectedDeployableIndex = index;
            selectPanel.SetActive(true);
            selectPanel.transform.position = Input.mousePosition;
            selectPanel.GetComponent<UI_Inventory_SelectPanel>().index = index;
            selectPanel.GetComponent<UI_Inventory_SelectPanel>().type = "Deployable";
        }
        else
        {
            selectPanel.SetActive(false);
            selectedDeployableIndex = -1;
        }
    }

}
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class UI_Inventory_SelectPanel : MonoBehaviour
{
    public UI_Inventory UI;
    public string type;
    public int index;
    public GameObject dropCrate;

    public void OnPressDrop()
    {
        if (type == "Weapon")
            OnWeaponPressDrop();
        if (type == "Ammo")
            OnAmmoPressDrop();
        if (type == "Deployable")
            OnDeployablePressDrop();
        gameObject.SetActive(false);
    }

    void OnWeaponPressDrop()
    {
        UI.pw.Drop(UI.pw.weapons[index]);
        UI.selectedWeaponIndex = -1;
    }
    void OnAmmoPressDrop()
    {
        GameObject crate = Instantiate(dropCrate, UI.player.transform.position, Quaternion.identity);
        crate.GetComponent<Crate>().items = new List<Item>();
        Item item = new Item();
        item.name = UI.pw.ammo_type[index];
        item.type = "Ammo";
        item.count = UI.pw.ammo_count[index];
        item.obj = null;
        item.module = new Module();
        crate.GetComponent<Crate>().items.Add(item);
        UI.pw.ammo_count[index] = 0;
    }
    void OnDeployablePressDrop()
    {

    }
}
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;
using TMPro;

public class UI_JetpackTemp : MonoBehaviour
{
    private GM _GM_;
    private GameObject player;
    private PlayerMove pm;

    private float heat;
    private float maxHeat;

    public TextMeshProUGUI UI_heat;
    public GameObject overheatedText;
    public Image image;

    public float alertHeat;
    public float criticalHeat;

    public Color defaultColor;
    public Color alertColor;
    public Color criticalColor;
    public Color overheatColor;

    void Start()
    {
        _GM_ = GameObject.FindGameObjectWithTag("GM").GetComponent<GM>();
        player = _GM_.player;
        pm = player.GetComponent<PlayerMove>();
    }

    void Update()
    {
        heat = pm.jetpack_heat;
        maxHeat = pm.jetpack_overheat;

        if (!pm.jetpack_overheated)
        {
            UI_heat.text = Mathf.RoundToInt(heat).ToString();
            image.fillAmount = heat / maxHeat;
            overheatedText.SetActive(false);
        }
        else
        {
            image.fillAmount = pm.jetpack_cooldown_timer / pm.jetpack_cooldown;
            UI_heat.text = "";
            overheatedText.SetActive(true);
        }

        if (pm.jetpack_overheated)
            image.color = overheatColor;
        else if (heat >= criticalHeat)
            image.color = criticalColor;
        else if (heat >= alertHeat)
            image.color = alertColor;
        else
            image.color = defaultColor;

    }
}
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class UI_LevelSelect : MonoBehaviour
{
    public bool is_open;

    public void OnStartButton()
    {
        if (!is_open)
        {
            is_open = true;
            GetComponent<Animator>().SetBool("IsOpen", true);
        }
        else
        {
            is_open = false;
            GetComponent<Animator>().SetBool("IsOpen", false);
        }
    }
}
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class UI_Menu : MonoBehaviour
{
    public GM _GM_;
    public GameObject menuPanel;
    public GameObject darken;

    void Start()
    {
        _GM_ = GameObject.FindGameObjectWithTag("GM").GetComponent<GM>();
        _GM_.AddShootingActiveSwitch("UI_Menu");
    }

    void Update()
    {
        if (Input.GetKeyUp(KeyCode.Escape))
            OnMenuButtonPress();
    }


    public void OnMenuButtonPress()
    {
        if (!menuPanel.activeInHierarchy)
        {
            menuPanel.SetActive(true);
            darken.SetActive(true);
            _GM_.shooting_active_switches[_GM_.shooting_active_keys.IndexOf("UI_Menu")] = false;
            Time.timeScale = 0.0f;
            _GM_.paused = true;

            //GameObject.FindGameObjectWithTag("Cursor").GetComponent<Cursory>().enabled = false;
            //GameObject.FindGameObjectWithTag("Cursor").GetComponent<SpriteRenderer>().enabled = false;
            //Cursor.visible = true;
        }
        else
        {
            menuPanel.SetActive(false);
            darken.SetActive(false);
            _GM_.shooting_active_switches[_GM_.shooting_active_keys.IndexOf("UI_Menu")] = true;
            Time.timeScale = 1.0f;
            _GM_.paused = false;
            //GameObject.FindGameObjectWithTag("Cursor").GetComponent<Cursory>().enabled = true;
            //GameObject.FindGameObjectWithTag("Cursor").GetComponent<SpriteRenderer>().enabled = true;
            //Cursor.visible = false;
        }
    }
}
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;
using TMPro;

public class UI_Weapon : MonoBehaviour
{
    private GM _GM_;
    private GameObject player;

    public Image weapon_img;
    public TextMeshProUGUI weapon_name;
    public TextMeshProUGUI ammo_text;
    public TextMeshProUGUI ammoType_text;
    public Image BG;
    public Sprite defaultIMG;

    private PlayerWeaponManager WM;

    List<int> ammoCount;
    List<string> ammoType;
    private int availableAmmo;
    private int currentAmmo;
    private int currentAmmo_update;

    private GameObject activeWeapon;
    private GameObject lastActiveWeapon;

    private int alertValue;

    public Color defaultColor;
    public Color alertColor;
    public Color emptyColor;

    // Start is called before the first frame update
    void Start()
    {
        _GM_ = GameObject.FindGameObjectWithTag("GM").GetComponent<GM>();
        player = _GM_.player;
        WM = player.GetComponent<PlayerWeaponManager>();
    }

    // Update is called once per frame
    void Update()
    {
        activeWeapon = WM.activeWeapon;
        ammoCount = player.GetComponent<PlayerWeaponManager>().ammo_count;
        ammoType = player.GetComponent<PlayerWeaponManager>().ammo_type;

        if(activeWeapon != null)
        {
            weapon_img.enabled = true;
            BG.enabled = true;

            //////////////      AMMO
            if (ammoCount[ammoType.IndexOf(WM.AW_ammoType)] < WM.AW_WS.ammoCount)
            {
                currentAmmo = ammoCount[ammoType.IndexOf(WM.AW_ammoType)];
            }
            else
            {
                currentAmmo = WM.AW_WS.ammoCount;
            }

            //////////////      WEAPON
            availableAmmo = ammoCount[ammoType.IndexOf(WM.AW_ammoType)] - WM.AW_WS.magSize;
            if (activeWeapon != lastActiveWeapon || WM.AW_WS.is_reloading == true || ammoCount[ammoType.IndexOf(WM.AW_ammoType)] == 0)
            {
                if (availableAmmo < 0)
                    availableAmmo = 0;
            }
            lastActiveWeapon = activeWeapon;

            

            ///////////////     COLOR
            alertValue = WM.AW_WS.alertAmmoCount;

            if (ammoCount[ammoType.IndexOf(WM.AW_ammoType)] <= 0)
            {
                ammo_text.color = emptyColor;
            }
            else if(ammoCount[ammoType.IndexOf(WM.AW_ammoType)] <= alertValue)
            {
                ammo_text.color = alertColor;
            }
            else
            {
                ammo_text.color = defaultColor;
            }

            //////////////      TEXT
            string displayText;

            if (availableAmmo < 0)
                availableAmmo = 0;

            if(WM.AW_WS.is_reloading == false)
            {
                displayText = currentAmmo + " / " + availableAmmo;
            }
            else
            {
                displayText =  "- / " + availableAmmo;
            }
            ammo_text.text = displayText;
            weapon_name.text = WM.AW_WS.name;
            ammoType_text.text = "[" + WM.AW_ammoType + "]";

            //////////////      IMAGE
            if (WM.AW_WS.IMG != null)
                weapon_img.sprite = WM.AW_WS.IMG;
            else
                weapon_img.sprite = defaultIMG;
        }
        else
        {
            weapon_name.text = string.Empty;
            ammo_text.text = string.Empty;
            ammoType_text.text = string.Empty;
            weapon_img.enabled = false;
            BG.enabled = false;
        }
        
    }
}
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class WeaponStats : MonoBehaviour
{
    /// <summary>
    /// PlayerWeaponManager에서 필요한 정보를 담는 스크립트
    /// -무기 이름
    /// -무기 종류
    /// -무기 특성
    /// -무기 아이템화, 무기화
    /// -해당 무기 스크립트와 PlayerWeaponManager 사이의 통로 역할
    /// </summary>
    [HideInInspector]
    public GM _GM_;
    private MasterWeaponManagement _WM_;

    public string name;

    [Header("Melee, AR, SMG, SG, SR, etc")]
    public string category;
    public Sprite IMG;
    public GameObject gun;
    public SpriteRenderer pointer;

    public Collider2D col;

    public Transform IK_L;
    public Transform IK_R;

    public string ammoType;
    public int alertAmmoCount;
    public bool rapidFire, hideOnEquip;
    public float reloadAnimDelay;

    [HideInInspector]
    public int ID, ammoCount, magSize;

    [HideInInspector]
    public bool is_shooting, is_reloading, is_aiming;


    // Start is called before the first frame update
    void Start()
    {
        _GM_ = GameObject.FindGameObjectWithTag("GM").GetComponent<GM>();
        _WM_ = _GM_.gameObject.GetComponent<MasterWeaponManagement>();

        ID = _WM_.gunIndex.IndexOf(name);

        if(transform.parent == null || transform.parent.tag != "Player/Inventory/Weapons")
        {
            Drop();
        }
    }

    public void Drop()
    {
        if (hideOnEquip)
            GetComponent<SpriteRenderer>().enabled = true;
        transform.parent = null;
        GetComponent<Rigidbody2D>().simulated = true;
        col.enabled = true;
        GetComponent<Animator>().SetBool("Shooting", false);
        pointer.enabled = true;
        gun.SetActive(false);
    }

    public void PickUp(Transform parent)
    {
        //Debug.Log(_GM_.player.GetComponent<PlayerWeaponManager>().weapons.IndexOf(gameObject));
        bool exists = false;
        foreach(GameObject gun in _GM_.player.GetComponent<PlayerWeaponManager>().weapons)
        {
            if(gun.GetComponent<WeaponStats>().ID == ID)
            {
                exists = true;
            }
        }
        if (!exists)
        {
            if (hideOnEquip)
                GetComponent<SpriteRenderer>().enabled = false;
            transform.SetParent(parent, true);
            transform.position = parent.position;
            transform.rotation = parent.rotation;
            transform.localScale = parent.localScale;
            GetComponent<Rigidbody2D>().simulated = false;
            col.enabled = false;
            pointer.enabled = false;
            gun.SetActive(true);
            _GM_.player.GetComponent<PlayerWeaponManager>().weapons.Add(gameObject);
            _GM_.player.GetComponent<PlayerWeaponManager>().Arm(gameObject);
        }
        else
        {
            GM.DisplayText("Weapon already exists", false);
        }
    }

    public void Shoot()
    {
        _GM_.player.GetComponent<PlayerWeaponManager>().Shoot();
    }

    public void SpawnBulletShell(string script)
    {
        switch (script)
        {
            case "Gun_Rifle":
                gun.GetComponent<Gun_Rifle>().SpawnBulletShell();
                break;
            default:
                Debug.Log("ERR: Unknown gun script (" + script + ")");
                break;
        }
    }
}

